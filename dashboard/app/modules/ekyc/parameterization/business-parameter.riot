<parameterization-main>
    <div class="br-mainpanel">
        <div class="br-pageheader">
            <nav class="breadcrumb pd-0 mg-0 tx-12">
                <span class="breadcrumb-item">Parameterization</span>
                <span class="breadcrumb-item active">Business Parameter</span>
            </nav>
        </div>
        <div class="br-pagebody pd-r-5 pd-l-5 mg-t-10">
            <div class="br-section-wrapper pd-x-20 pd-sm-x-30 pd-t-40">
                <div class="row">
                    <div class="col-12">
                        <table class="table table-borderless tx-12">
                            <tr>
                                <td colspan="3" class="pd-t-20 wd-150"><b>Threshold to passed Face Comparison to Dukcapil</b></td>
                            </tr>
                            <tr>
                                <td class="wd-200">CBM Onboarding</td>
                                <td class="wd-10">:</td>
                                <td class="wd-150">
                                    <input
                                        type="number"
                                        disabled="{item.cbmInput.disabled}"
                                        class="form-control tx-12"
                                        value="{item.cbmInput.value}"
                                        max="100"
                                        maxlength="3"
                                        id="cbm-threshold">
                                </td>
                                <td>
                                    <label class="mg-t-20" if="{item.cbmInput.newValue}">Proposed Value: <b>{item.cbmInput.newValue}</b></label>
                                </td>
                            </tr>
                            <tr>
                                <td><b>Threshold to require Video Call</b></td>
                                <td>:</td>
                                <td>
                                    <input
                                        type="number"
                                        disabled="{item.vcInput.disabled}"
                                        class="form-control tx-12"
                                        value="{item.vcInput.value}"
                                        max="100"
                                        maxlength="3"
                                        id="vc-threshold">
                                    </td>
                                <td>
                                    <label class="mg-t-20" if="{item.vcInput.newValue}">Proposed Value: <b>{item.vcInput.newValue}</b></label>
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
                <div class="row pd-t-80">
                    <div class="col-12 text-center bd-t pd-t-10">
                        <button disabled="disabled" class="btn btn-secondary" if="{pendingMode}">Pending Approval</button>
                        <button if="{editButton.isLoading}" disabled="disabled" class="btn btn-default">
                            <span if="{editButton.isLoading}" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span if="{editButton.isLoading}">Getting Data...</span>
                        </button>
                        <button disabled="{editButton.isLoading ? 'true' : ''}" style="min-width: 100px;" class="btn btn-primary" if="{!editMode && isHasAccess && canEdit && !pendingMode}" onclick="{edit}">Edit</button>
                        <button class="btn btn-danger" if="{editMode && !pendingMode}" onclick="{cancel}">Cancel</button>
                        <button disabled="{submitButton.isLoading ? 'true' : ''}" class="btn btn-success mg-l-30" if="{editMode && !pendingMode}" onclick="{confirmUpdateThreshold}">
                            <span if="{!submitButton.isLoading}">Submit</span>
                            <span if="{submitButton.isLoading}" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span if="{submitButton.isLoading}">Saving...</span>
                        </button>
                    </div>
                </div>
                <div class="row" if="{pendingMode}">
                    <div class="col-12">
                        <p class="tx-12" style="color: #e6e9f3;">Requested By : { pending.name }</p>
                        <p class="tx-12" style="color: #e6e9f3;">Requested At : { pending.createdAt }</p>
                    </div>
                </div>
            </div>
        </div>
        <ekyc-parameterization-modal-confirmation callback="{getReturnFromConfirmation}" config="{config}" showModal="{showModal}"></ekyc-parameterization-modal-confirmation>
    </div>
    
    <script>
        import {
            cancelAllRequest,

        } from 'services/SDK/main'
        import {
            GetThresholdParameters,
        } from 'appModule/ekyc/ekyc.sdk'
        import { createAgentActivity } from 'appModule/agents/agent-activity.sdk'
        import { hasAccess } from 'helpers/permission'
        import { showAlertError, showAlertSuccess } from 'helpers/utilities'
        import { goTo } from 'helpers/ma'
        export default {
            editMode: false,
            canEdit: false,
            pendingMode: false,
            editButton: {},
            pending: {},
            submitButton: {},
            isHasAccess: false,
            item: {},
            onBeforeMount() {
                this.initDefaultValue()
            },
            initDefaultValue() {
                this.pendingMode = false
                this.isHasAccess = hasAccess('ekyc.parameterization.business_parameter.request_changes')
                this.item = {
                    cbmInput: { disabled: true, type: 'THRESHOLD', value: 0, key: 'THRESHOLD_FACE_COMPARISON', isChanged: false, newValue: 0 },
                    vcInput: { disabled: true, type: 'THRESHOLD', value: 0, key: 'THRESHOLD_VIDEO_CALL', isChanged: false, newValue: 0 }
                }
                this.editMode = false
                this.canEdit = false
                this.pending = {}
                this.showModal = false
                this.submitButton.isLoading = false
                this.editButton.isLoading = false
            },
            onBeforeUnmount() {
                cancelAllRequest()
            },
            onMounted() {
                console.log('mounting parameterization.business_parameter')
                this.getThreshold()
                this.logAgentActivity('Open Business Parameter', '')
            },
            logAgentActivity(action, detail) {
                createAgentActivity({
                    module: 'Parameterization - Business Parameter',
                    action,
                    detail
                })
            },
            edit(isEdit=true) {
                this.editMode = isEdit
                this.item.cbmInput.disabled = !isEdit
                this.item.vcInput.disabled = !isEdit
                this.update()
            },
            cancel() {
                this.item.cbmInput.value = parseInt(this.item.cbmInput.value)
                this.edit(false)
            },
            async getThreshold() {
                try {
                    this.editButton.isLoading = true
                    this.update()
                    const req = await GetThresholdParameters({configKey: [this.item.cbmInput.key, this.item.vcInput.key].join()})
                    const data = req.data || {}
                    this.item.cbmInput.value = data[this.item.cbmInput.key].configValue
                    this.item.vcInput.value = data[this.item.vcInput.key].configValue
                    this.pendingMode = data.isPending || false
                    if (this.pendingMode) {
                        this.item.cbmInput.newValue = data.newValues[this.item.cbmInput.key]
                        this.item.vcInput.newValue = data.newValues[this.item.vcInput.key]
                        this.pending.name = data.requestedBy.name
                        this.pending.createdAt = data.requestedBy.date
                    }
                    this.canEdit = data.isCanEdit || false
                } catch (err) {
                    showAlertError(err)
                }
                this.editButton.isLoading = false
                this.update()
            },
            getChanges() {
                const CBMInputValue = this.$('#cbm-threshold').value
                const VCInputValue = this.$('#vc-threshold').value
                const oldCBM = this.item.cbmInput.value
                const oldVC = this.item.vcInput.value
                const config = {
                    cbm: {
                        old_value: oldCBM,
                        new_value: CBMInputValue,
                    },
                    vc: {
                        old_value: oldVC,
                        new_value: VCInputValue
                    }
                }
                if (CBMInputValue !== this.item.cbmInput.value) {
                    this.item.cbmInput.value = CBMInputValue
                    this.item.cbmInput.isChanged = true
                }
                if (VCInputValue !== this.item.vcInput.value) {
                    this.item.vcInput.value = VCInputValue
                    this.item.vcInput.isChanged = true
                }
                return config
            },
            confirmUpdateThreshold() {
                this.config = this.getChanges()
                this.showModal = true
                this.update()
            },
            getReturnFromConfirmation(status) {
                this.initDefaultValue()
                this.getThreshold()
                // this.item.cbmInput.value = this.config.cbm.old_value
                // this.item.vcInput.value = this.config.vc.old_value
                // this.item.cbmInput.newValue = this.config.cbm.new_value
                // this.item.vcInput.newValue = this.config.vc.new_value
                // this.pendingMode = true
                // this.update()
            },
        }
    </script>
</parameterization-main>