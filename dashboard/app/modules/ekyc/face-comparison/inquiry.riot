<face-comparison-inquiry>
    <div class="br-mainpanel">
        <div class="br-pageheader">
            <nav class="breadcrumb pd-0 mg-0 tx-12">
                <span class="breadcrumb-item">Face Comparison</span>
                <span class="breadcrumb-item active">Inquiry Result</span>
            </nav>
        </div>
        <div class="br-pagebody pd-r-5 pd-l-5 mg-t-10">
            <div class="br-section-wrapper pd-x-20 pd-t-10">
                <div class="row">
                    <div class="col-sm-7">
                        <!-- <div class="form-inline"> -->
                            <input type="text" class="form-control mr-sm-2 float-left tx-11" style="width: 70%;" id="search" placeholder="Search Something" value="{searchComponents.search_all.value}">
                            <button disabled="{buttons.search.loading ? 'true' : ''}" type="button" class="btn btn-primary float-left tx-11" onclick="{getList}">
                                <span if="{!buttons.search.loading}">Search</span>
                                <span if="{buttons.search.loading}" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span if="{buttons.search.loading}">Searching...</span>
                            </button>
                        <!-- </div> -->
                    </div>
                    <div class="col-sm-5">
                        <div class="input-group wd-350 float-right">
                            <!-- <input type="text" class="form-control tx-12 float-right" value="{searchComponents.fromDate.value} - {searchComponents.endDate.value}" id="date1"> -->
                            <form-date-picker-range initial-date="{ initialDate }" el-class="tx-12" show-time="{ true }" show-icon="{ false }" shortcut="{ true }" date-type="{ 'range' }" callback="{ updateDate }" custom-styles="width: 258px;"></form-date-picker-range>
                            <div class="input-group-append">
                                <span class="input-group-text" id="basic-addon2">
                                    <i class="ion-calendar tx-11"></i>
                                </span>
                            </div>
                            <div class="input-group-append">
                                <div class="input-group-text" id="basic-addon2">
                                    <input type="checkbox" id="all-time" onclick="{toggleCheckDate}" checked="{searchComponents.all_date}">
                                    <span class="tx-12 pd-l-2">All</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row pd-t-20">
                    <div class="col-12 pd-b-10">
                        <label class="pd-5 tx-10 float-left">Display Record {dataInformation.startNumber} - {dataInformation.endNumber} out of {dataInformation.totalDocuments} ({dataInformation.totalSelected} selected out of {dataInformation.currentCount} rows)</label>
                        <button disabled="{buttons.sync.loading ? 'true' : ''}" class="btn btn-success pd-t-5 pd-b-5 pd-r-20 pd-l-20 tx-10 float-right" onclick="{doSync}">
                            <span if="{!buttons.sync.loading}">Sync</span>
                            <span if="{buttons.sync.loading}" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span if="{buttons.sync.loading}">Synchronizing...</span>
                        </button>
                        <label class="pd-5 tx-10 float-right">{ sync.last_sync }</label>
                    </div>
                    <div class="col-12 text-center bd-t pd-t-10 pd-r-0 pd-l-0 overflow-auto">
                        <div class="table-wrapper">
                            <table class="table table-bordered table-inquiry table-hover">
                                <thead>
                                    <tr>
                                        <th class="wd-50">
                                            <input type="checkbox" id="checkall" class="float-left mg-r-5" checked="{tableComponents.checkall.isChecked}" onclick="{toggleCheckAll}">
                                            <span class="tx-9 float-left">#</span>
                                        </th>
                                        <th class="wd-120">
                                            <div class="wrapper float-left" onclick="{() => doSort('transactionTime')}">
                                                <div class="top wd-10 { (searchComponents.sort_key.value === 'transactionTime' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                    <i class="ion-arrow-up-b tx-8"></i>
                                                </div>
                                                <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'transactionTime' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                    <i class="ion-arrow-down-b tx-8"></i>
                                                </div>
                                            </div>
                                            <span class="float-left mg-l-2 pd-t-2">Date Time</span>
                                        </th>
                                        <th class="wd-150">
                                            <div class="wrapper float-left" onclick="{() => doSort('nik')}">
                                                <div class="top wd-10 { (searchComponents.sort_key.value === 'nik' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                    <i class="ion-arrow-up-b tx-8"></i>
                                                </div>
                                                <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'nik' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                    <i class="ion-arrow-down-b tx-8"></i>
                                                </div>
                                            </div>
                                            <span class="float-left mg-l-2 pd-t-2">NIK</span>
                                            <div class="wrapper-filter-and-search wd-10 text-right pd-t-3 float-right popup-filter" id="search-nik">
                                                <i class="ion-search tx-12 { searchComponents.search.nik.inUse ? 'text-warning' : '' }" onclick="{(e) => toggleState(e, 'searchComponents.search.nik.show')}"></i>
                                                <popover-search-box show="{ searchComponents.search.nik.show }" callback="{ setSearchValue }" default-value="{ searchComponents.search.nik.value }" name="{ 'nik' }"></popover-search-box>
                                            </div>
                                        </th>
                                        <th class="wd-100">
                                            <div class="wrapper float-left" onclick="{() => doSort('channelName')}">
                                                <div class="top wd-10 { (searchComponents.sort_key.value === 'channelName' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                    <i class="ion-arrow-up-b tx-8"></i>
                                                </div>
                                                <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'channelName' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                    <i class="ion-arrow-down-b tx-8"></i>
                                                </div>
                                            </div>
                                            <span class="float-left mg-l-2 pd-t-2">Source</span>
                                            <div class="wrapper-filter-and-search wd-10 text-right pd-t-3 float-right popup-filter">
                                                <i class="ion-funnel tx-12 { searchComponents.filter.source.inUse ? 'text-warning' : '' }" onclick="{(e) => toggleState(e, 'searchComponents.filter.source.show')}"></i>
                                                <popover-filter-checkbox type="{ 'source' }" callback="{ setFilter }" show="{ searchComponents.filter.source.show }" data-items="{ searchComponents.filter.source.items }" data-selected="{ searchComponents.filter.source.selected }"></popover-filter-checkbox>
                                            </div>
                                        </th>
                                        <th class="wd-200">
                                            <div class="wrapper float-left" onclick="{() => doSort('actionBy')}">
                                                <div class="top wd-10 { (searchComponents.sort_key.value === 'actionBy' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                    <i class="ion-arrow-up-b tx-8"></i>
                                                </div>
                                                <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'actionBy' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                    <i class="ion-arrow-down-b tx-8"></i>
                                                </div>
                                            </div>
                                            <span class="float-left mg-l-2 pd-t-2">Action by</span>
                                            <div class="wrapper-filter-and-search wd-10 text-right pd-t-3 float-right popup-filter" id="search-actionby">
                                                <i class="ion-search tx-12 { searchComponents.search.actionby.inUse ? 'text-warning' : '' }" onclick="{(e) => toggleState(e, 'searchComponents.search.actionby.show')}"></i>
                                                <popover-search-box show="{ searchComponents.search.actionby.show }" callback="{ setSearchValue }" default-value="{ searchComponents.search.actionby.value }" name="{ 'actionby' }"></popover-search-box>
                                            </div>
                                        </th>
                                        <th class="wd-120">
                                            <div class="wrapper float-left" onclick="{() => doSort('threshold')}">
                                                <div class="top wd-10 { (searchComponents.sort_key.value === 'threshold' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                    <i class="ion-arrow-up-b tx-8"></i>
                                                </div>
                                                <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'threshold' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                    <i class="ion-arrow-down-b tx-8"></i>
                                                </div>
                                            </div>
                                            <span class="float-left mg-l-2 pd-t-2">Threshold</span>
                                            <div class="wrapper-filter-and-search wd-10 text-right pd-t-3 float-right popup-filter" id="search-threshold">
                                                <i class="ion-search tx-12 { searchComponents.search.threshold.inUse ? 'text-warning' : '' }" onclick="{(e) => toggleState(e, 'searchComponents.search.threshold.show')}"></i>
                                                <popover-search-box show="{ searchComponents.search.threshold.show }" callback="{ setSearchValue }" default-value="{ searchComponents.search.threshold.value }" name="{ 'threshold' }"></popover-search-box>
                                            </div>
                                        </th>
                                        <th class="wd-100">
                                            <div class="wrapper float-left" onclick="{() => doSort('similarity')}">
                                                <div class="top wd-10 { (searchComponents.sort_key.value === 'similarity' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                    <i class="ion-arrow-up-b tx-8"></i>
                                                </div>
                                                <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'similarity' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                    <i class="ion-arrow-down-b tx-8"></i>
                                                </div>
                                            </div>
                                            <span class="float-left mg-l-2 pd-t-2">Similarity</span>
                                            <div class="wrapper-filter-and-search wd-10 text-right pd-t-3 float-right popup-filter" id="search-similarity">
                                                <i class="ion-search tx-12 { searchComponents.search.similarity.inUse ? 'text-warning' : '' }" onclick="{(e) => toggleState(e, 'searchComponents.search.similarity.show')}"></i>
                                                <popover-search-box show="{ searchComponents.search.similarity.show }" callback="{ setSearchValue }" default-value="{ searchComponents.search.similarity.value }" name="{ 'similarity' }"></popover-search-box>
                                            </div>
                                        </th>
                                        <th class="wd-80">
                                            <div class="wrapper float-left" onclick="{() => doSort('result')}">
                                                <div class="top wd-10 { (searchComponents.sort_key.value === 'result' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                    <i class="ion-arrow-up-b tx-8"></i>
                                                </div>
                                                <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'result' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                    <i class="ion-arrow-down-b tx-8"></i>
                                                </div>
                                            </div>
                                            <span class="float-left mg-l-2 pd-t-2">Result</span>
                                            <div class="wrapper-filter-and-search wd-10 text-right pd-t-3 float-right popup-filter">
                                                <i class="ion-funnel tx-12 { searchComponents.filter.result.inUse ? 'text-warning' : '' }" onclick="{(e) => toggleState(e, 'searchComponents.filter.result.show')}"></i>
                                                <popover-filter-checkbox type="{ 'result' }" callback="{ setFilter }" show="{ searchComponents.filter.result.show }" data-items="{ searchComponents.filter.result.items }" data-selected="{ searchComponents.filter.result.selected }"></popover-filter-checkbox>
                                            </div>
                                        </th>
                                        <th class="text-center wd-100">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr each="{list in listItems}">
                                        <td>
                                            <div class="wrapper float-left">
                                                <input type="checkbox" id="checkall" checked="{tableComponents.selectedRows[list.id]}" onclick="{() => toggleChecklist(list.id)}" id="check-{list.id}">
                                            </div>
                                            <span class="mg-l-5 float-left tx-10">{ list.n }</span>
                                        </td>
                                        <td>{ list.transactionTime }</td>
                                        <td>
                                            <span class="float-left" id="nik-{list.NIK}">{ list.nik }</span>
                                            <button class="btn btn-primary float-right pd-r-5 pd-l-5 pd-t-2 pd-b-2" onclick="{() => copy(list.nik)}" data-toggle="popover" data-trigger="focus" data-content="Copied">
                                                <i class="ion-ios-browsers-outline"></i>
                                            </button>
                                        </td>
                                        <td>
                                            { list.channelName }
                                        </td>
                                        <td>
                                            { list.actionBy }
                                        </td>
                                        <td class="text-center">
                                            { list.threshold }
                                        </td>
                                        <td class="text-center">
                                            { list.similarity }
                                        </td>
                                        <td class="text-center">
                                            { list.result }
                                        </td>
                                        <td class="text-center">
                                            <button class="btn btn-info tx-10 pd-5" onclick="{() => detail(list.id)}">Detail</button>
                                        </td>
                                    </tr>
                                    <tr if="{!isLoading && listItems.length === 0}">
                                        <td colspan="9" class="text-center">No Data Found</td>
                                    </tr>
                                    <tr if="{isLoading}">
                                        <td colspan="9" class="text-center">Loading...</td>
                                    </tr>
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="9">
                                            <div class="align-items-center justify-content-center float-right mg-t-20">
                                                <ul class="pagination pagination-basic pagination-rounded mg-b-0">
                                                    <li class="page-item">
                                                        <form-limit-per-page values="{dataInformation.availableLimits}" callback="{changeLimit}" custom-class="tx-11"></form-limit-per-page>
                                                    </li>
                                                    <li class="page-item {!pagination.hasPrev ? 'disabled' : ''}  hidden-xs-down">
                                                        <a class="page-link pointer" onclick="{doPrev}" aria-label="Prev Page">
                                                            <i class="icon ion-ios-arrow-back"></i>
                                                        </a>
                                                    </li>
                                                    <li class="page-item active">
                                                        <div class="page-link tx-12" aria-label="current">
                                                        { pagination.current }
                                                        </div>
                                                    </li>
                                                    <li class="page-item {!pagination.hasNext? 'disabled' : ''}">
                                                        <a class="page-link pointer" onclick="{doNext}" aria-label="Next Page">
                                                            <i class="icon ion-ios-arrow-forward"></i>
                                                        </a>
                                                    </li>
                                                    <li class="page-item">
                                                        <select id="jump-to-page" class="form-control tx-12" onchange="{goToPage}">
                                                            <option value="{jp.n}" selected="{jp.selected}" each="{jp in dataInformation.availablePages}">{jp.n}</option>
                                                        </select>
                                                    </li>
                                                </ul>
                                            </div>
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="row tx-11">
                    <div class="col-sm-6">
                        <label>Download</label><br>
                        <div class="form-inline">
                            <select class="form-control float-left tx-11" id="download-type" onchange="{ checkButtonDownloadSelected }">
                                <option value="">Download Type</option>
                                <option value="list">Face Comparison Result - List</option>
                                <option value="detail">Face Comparison Result - Detail</option>
                            </select>
                            <button disabled="{(buttons.downloadSelected.loading || this.buttons.downloadSelected.disabled) ? 'true' : ''}" class="btn btn-primary tx-10 float-left mg-l-5 pd-r-5 pd-l-5" onclick="{downloadSelected}">
                                <span if="{!buttons.downloadSelected.loading}">Download Selected</span>
                                <span if="{buttons.downloadSelected.loading}" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span if="{buttons.downloadSelected.loading}">Loading...</span>
                            </button>
                            <button disabled="{(buttons.downloadAll.disabled || buttons.downloadAll.loading || (listItems.length === 0) || isLoading) ? 'true' : ''}" class="btn btn-primary tx-10 float-left mg-r-5 mg-l-5 pd-r-5 pd-l-5" onclick="{downloadAll}">
                                <span if="{!buttons.downloadAll.loading}">Download All</span>
                                <span if="{buttons.downloadAll.loading}" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span if="{buttons.downloadAll.loading}">Loading...</span>
                            </button>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <label>Simulate</label><br>
                        <div class="form-inline">
                            <select class="form-control float-left tx-11" id="download-simulated-type" onchange="{ checkButtonDownloadSelectedSimulate }">
                                <option value="">Download Type</option>
                                <option value="list">Face Comparison Simulation - List</option>
                                <option value="detail">Face Comparison Simulation - Detail</option>
                            </select>
                            <input class="form-control tx-11 float-left mg-r-5 mg-l-5" type="number" id="simulated-threshold" placeholder="Threshold" onkeyup="{ checkButtonDownloadSelectedSimulate }" style="width: 80px; padding-left: 5px;padding-right:5px;">
                            <button disabled="{(buttons.downloadSimulate.disabled || buttons.downloadSimulate.loading || (listItems.length === 0) || isLoading) ? 'true' : ''}" class="btn btn-primary tx-10 float-left pd-r-5 pd-l-5" onclick="{downloadWithThreshold}">
                                <span if="{!buttons.downloadSimulate.loading}">Download</span>
                                <span if="{buttons.downloadSimulate.loading}" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span if="{buttons.downloadSimulate.loading}">Loading...</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        thead tr th, tbody tr td {
            letter-spacing: 0px;
            font-size: 11px;
            padding: 5px;
        }
        tr:last-child {
            border-bottom: 1px solid #C0C0C0;
        }
        .table-wrapper {
            width: 100%;
        }
        .wrapper, .wrapper-filter-and-search {
            cursor: pointer;
        }
        .wrapper:hover, .wrapper-filter-and-search:hover {
            color: #C0C0C0;
        }
        .alert-download {
            position: absolute;
            bottom: 0px;
            right: 5px;
            z-index: 9999;
            margin-bottom: 5px;
        }
        .wd-120{
            width: 120px !important;
        }
        .top {
            height: 10px;
        }
        .bottom {
            height: 10px;
        }
    </style>
    
    <script>
        import {
            cancelAllRequest,
        } from 'services/SDK/main'
        import {
            FaceComparisonInquiry,
            FaceComparisonInquiryDownload,
            FaceComparisonInquiryDetail,
            FaceComparisonInquiryDetailDownload,
            FaceComparisonInquirySync,
            FaceComparisonInquiryFilters,
            FaceComparisonAdHocChecking,
        } from 'appModule/ekyc/ekyc.sdk'
        import { createAgentActivity } from 'appModule/agents/agent-activity.sdk'
        import { result, cloneDeep, set } from 'lodash'
        import downloadFile from 'js-file-download'
        import { DateTimeRangePicker } from 'helpers/datepicker'
        import { getCookie } from 'helpers/cookie'
        import { changeStorage, getStorage } from 'helpers/storage'
        import { sendToClipboard } from 'helpers/utilities'
        import { showAlertError } from 'helpers/utilities'
        import { goTo } from 'helpers/ma'
        const pagination = {hasData: true, current: 1, hasNext: false, hasPrev: false}
        const download = {enabled: false, threshold: 0}
        const buttons = {
            search: { loading: false },
            sync: { loading: false },
            downloadAll: { loading: false, disabled: true },
            downloadSelected: { loading: false, disabled: true },
            downloadSimulate: { loading: false, disabled: true },
        }
        const sync = {
            last_sync: '2022/01/15 09:00:11',
            is_syncronizing: false
        }
        const dataInformation = {
            startNumber: 1,
            endNumber: 1,
            currentCount: 0,
            totalDocuments: 0,
            estimatedPages: 1,
            availablePages: [{n: 1}],
            availableLimits: [10, 50, 100]
        }
        const filterItemSource = ['CBM', 'BOC']
        const filterItemResult = ['Matched', 'Not Matched', 'Exception']
        const initialDate = {
            since: moment().format('YYYY-MM-DD 00:00'),
            until: moment().format('YYYY-MM-DD 23:59')
        }
        const searchComponents = {
            page: { value: 1 },
            limit: { value: 10 },
            search_all: { inUse: false, value: '' },
            fromDate: { inUse: false, value: initialDate.since },
            endDate: { inUse: false, value: initialDate.until },
            sort_key: { value: 'transactionTime' },
            sort_value: { value: 'desc' },
            search: {
                nik: { show: false, inUse: false, value: '' },
                threshold: { show: false, inUse: false, value: '' },
                actionby: { show: false, inUse: false, value: '' },
                similarity: { show: false, inUse: false, value: '' },
            },
            all_date: false,
            filter: {
                source: { show: false, inUse: false, value: filterItemSource.join(), items: filterItemSource, selected: filterItemSource },
                result: { show: false, inUse: false, value: filterItemResult.join(), items: filterItemResult, selected: filterItemResult },
            }
        }
        const defaultFormatDateTime = 'YYYY-MM-DD HH:mm'
        const tableComponents = {
            checkall: {
                isChecked: false
            },
            selectedRows: {}
        }
        export default {
            isLoading: false,
            onBeforeMount() {
                this.initiateDefaultValue()
                const defaultSearch = getStorage('SEARCH_QUERIES', 'FC_INQUIRY', '{}')
                // if (defaultSearch !== '{}') this.searchComponents = JSON.parse(defaultSearch)
                window.doFilter = this.doFilter
                window.search = this.search
                window.searchReset = this.searchReset
                window.fcFilterReset = this.filterReset
                window.setDefaultSearchValue = this.setDefaultSearchValue
            },
            onBeforeUnmount() {
                $('.popup-filter').popover('hide')
                cancelAllRequest()
                this.initiateDefaultValue(true)
            },
            onBeforeUpdate() {
                $('[data-toggle="popover"]').popover()
            },
            onMounted() {
                console.log('mounting face-comparison inquiry')
                this.doSync()
                this.getList()
                this.logAgentActivity('Open List', '')
            },
            updateDate({ since, until }) {
                if (since) {
                    since = since.format(defaultFormatDateTime)
                    this.searchComponents.fromDate.value = since
                }
                if (until) {
                    until = until.format(defaultFormatDateTime)
                    this.searchComponents.endDate.value = until
                }
                this.searchComponents.all_date = false
                this.initialDate = { since, until }
                this.update()
                this.getList()
            },
            logAgentActivity(action, detail) {
                createAgentActivity({
                    module: 'Face Comparison Dukcapil - Result Inquiry',
                    action,
                    detail
                })
            },
            initiateDefaultValue(needUpdate) {
                this.isLoading = false
                this.pagination = cloneDeep(pagination)
                this.download = cloneDeep(download)
                this.sync = cloneDeep(sync)
                this.buttons = cloneDeep(buttons)
                this.listItems = []
                this.dataInformation = cloneDeep(dataInformation)
                this.searchComponents = cloneDeep(searchComponents)
                this.tableComponents = cloneDeep(tableComponents)
                this.initialDate = cloneDeep(initialDate)
                if (needUpdate) this.update()
            },
            toggleState(e, key) {
                const currentState = result(this, key)
                set(this, key, !currentState)
                console.log(key, result(this, key))
                this.update()
            },
            toggleCheckDate() {
                const isCheck = $('#all-time').is(":checked")
                this.searchComponents.all_date = false
                if (isCheck) {
                    this.searchComponents.fromDate.value = ''
                    this.searchComponents.endDate.value = ''
                    this.searchComponents.all_date = true
                    this.getList()
                }
            },
            loading(val=true) {
                this.isLoading = val
                this.update()
            },
            searchReset(name) {
                if (!name) return false
                const id = `#input-search-${name}`
                $(id).val('')
                $(`#search-${name}`).popover('hide')
                this.searchComponents.search[name]['inUse'] = false
                this.searchComponents.search[name]['value'] = ''
                this.getList()
            },
            setDefaultSearchValue(name, id) {
                return () => {
                    const defaultValue = this.searchComponents.search[name].value
                    setTimeout(() => { // harus menggunakan setTimeout, krn tidak bisa berubah hasil nya kalau gak di timeout dlu. entahlah
                        $(`#${id}`).val(defaultValue)
                    }, 1)
                }
            },
            doFilter(name) {
                const selected = []
                const sel = $(`.input-filter-${name}`).each(function () {
                    const isChecked = $(this).is(':checked')
                    if(isChecked) {
                        selected.push($(this).val())
                    }
                })

                this.searchComponents.filter[name].selected = selected
                this.searchComponents.filter[name].inUse = (selected.length > 0)
                this.searchComponents.filter[name].value = selected.join(',')
                this.getList()
            },
            search(name) {
                if (!name) return false
                const id = `#input-search-${name}`
                const value = $(id).val()
                const isInUse = value && value.length > 0
                this.searchComponents.search[name]['inUse'] = isInUse
                this.searchComponents.search[name]['value'] = value
                this.getList()
            },
            async doSearch() {
                try {
                    this.dataInformation.totalSelected = 0
                    this.listItems = []
                    this.buttons.search.loading = true
                    this.loading(true)
                    // this.update()
                    const queries = this.getQuery()
                    const { data } = await FaceComparisonInquiry(queries)
                    this.listItems = []
                    const {items=[], startNumber=1, endNumber=1} = data
                    this.dataInformation.startNumber = startNumber
                    this.dataInformation.endNumber = endNumber-1
                    if (items.length > 0) {
                        let n = 0
                        for (const item of items) {
                            const id = item.id
                            item.n = this.dataInformation.startNumber + n
                            this.tableComponents.selectedRows[id] = false // update check
                            item.transactionTime = moment(item.transactionTime).format('YYYY/MM/DD HH:mm:ss')
                            this.listItems.push(item)
                            n += 1
                        }
                        this.sync.last_sync = moment(result(this.listItems, '[0][sync_date]', '')).format('YYYY/MMM/DD HH:mm:ss')
                        this.buttons.downloadAll.disabled = false
                    }
                    this.dataInformation.currentCount = items.length
                    this.loading(false)
                    const res = await FaceComparisonInquiryFilters(queries)
                    const { data: dataFilters } = res
                    // this.setFilters(dataFilters.item)
                    this.dataInformation.availablePages = []
                    const currentPage = dataFilters.page
                    const estimatedPages = dataFilters.estimatedPages
                    for (let n = 1; n <= estimatedPages; n++) {
                        let itm = {n}
                        if (currentPage === n) itm.selected = true
                        this.dataInformation.availablePages.push(itm)
                    }
                    this.dataInformation.totalDocuments = dataFilters.item.totalDocuments
                    this.pagination.current = currentPage
                    this.dataInformation.estimatedPages = estimatedPages

                    if (this.searchComponents.all_date) {
                        const since = moment(result(dataFilters, 'item.times.since')).format('YYYY-MM-DD 00:00')
                        const until = moment().format('YYYY-MM-DD 23:59')
                        if (since) this.searchComponents.fromDate.value = moment(since).format('YYYY-MM-DD 00:00')
                        if (until) this.searchComponents.endDate.value = until
                        this.initialDate = { since, until }
                    }
                    this.update()
                    this.checkPaginationButtons()
                } catch (err) {
                    showAlertError(err)
                }
                this.buttons.search.loading = false
                this.update()
            },
            changeLimit(newLimit=10) {
                this.searchComponents.limit.value = newLimit
                this.searchComponents.page.value = 1
                this.getList()
                this.update()
            },
            setFilter (type, values) {
                let inUse = false
                if (values.length < this.searchComponents.filter[type].items.length) inUse = true
                this.searchComponents.filter[type].inUse = inUse
                this.searchComponents.filter[type].selected = values
                this.searchComponents.filter[type].value = values.join()
                this.getList()
            },
            setSearchValue({name, value, id}) {
                let inUse = false
                if (value) {
                    this.searchComponents.all_date = true
                    inUse = true
                }
                this.searchComponents.search[name].inUse = inUse
                this.searchComponents.search[name].value = value
                this.update()
                this.getList()
            },
            getQuery() {
                let queries = {}
                const sc = this.searchComponents
                for (const x in sc) {
                    if (['search', 'filter'].indexOf(x) > -1) {
                        for (const s in sc[x]) {
                            const key = `${x}_${s}`
                            queries[key] = result(sc[x], `${s}.value`)
                        }
                        continue
                    }
                    queries[x] = result(sc, `${x}.value`)
                }
                changeStorage({'SEARCH_QUERIES': JSON.stringify({...this.searchComponents, all_date: false})}, 'FC_INQUIRY')
                if (window.run_debug) debugger
                return queries
            },
            getList(e) {
                if (e) this.searchComponents.page.value = 1
                this.searchComponents.search_all.value = this.$('#search') ? this.$('#search').value : ''
                this.doSearch()
            },
            detail(id) {
                changeStorage({'CURRENT_ID': id}, 'FC_INQUIRY')
                goTo('face-comparison/inquiry-detail')
            },
            copy(text) {
                sendToClipboard(text)
            },
            /* SORTING */
            doSort(type) {
                this.searchComponents.sort_key.value = type
                if (this.searchComponents.sort_value.value === 'desc') this.searchComponents.sort_value.value = 'asc'
                else if (this.searchComponents.sort_value.value === 'asc') this.searchComponents.sort_value.value = 'desc'
                this.getList()
            },
            /* SYNC */
            sync() {
                this.doSync().then(console.info)
            },
            async doSync() {
                try {
                    let page = 1
                    let limit = 
                    this.buttons.sync.loading = true
                    this.update()
                    const query = this.getQuery()
                    let hasNext = false
                    let lastSync = null
                    while(true) {
                        const x = await FaceComparisonInquirySync({...query, limit, page})
                        hasNext = result(x, 'data.hasNext', false)
                        lastSync = result(x, 'data.last_sync')
                        if (hasNext) {
                            page += 1
                            const x = await FaceComparisonInquirySync({query, limit, page})
                            hasNext = result(x, 'data.hasNext', false)
                            lastSync = result(x, 'data.last_sync')
                        } else {
                            break
                        }
                    }
                    if (lastSync) {
                        this.sync.last_sync = lastSync
                        this.buttons.sync.loading = false
                        this.update()
                        this.getList()
                    }
                    return 'Last Sync:' + lastSync
                } catch (err) {
                    showAlertError(err)
                    this.buttons.sync.loading = false
                    this.update()
                }
            },
            // DOWNLOADS
            downloadAll () {
                this.download.enabled = true
                this.buttons.downloadAll.loading = true
                this.update()
                setTimeout(() => {
                    FaceComparisonInquiryDownload({...this.getQuery(), filename: true})
                        .catch((err) => {
                            showAlertError(err)
                            return null
                        })
                        .then((res) => {
                            if (res) {
                                const filename = res.filename
                                if (!filename) {
                                    showAlertError(new Error('Invalid Given Filename From Server'))
                                    return null
                                }
                                const queries = this.getQuery()
                                FaceComparisonInquiryDownload(queries)
                                    .then((data) => {
                                        downloadFile(data, filename)
                                        this.download.enabled = false
                                        this.buttons.downloadAll.loading = false
                                        let currentQueries = []
                                        for (const q in queries) {
                                            if (queries[q]) currentQueries.push(q + '=' + queries[q])
                                        }
                                        this.logAgentActivity('Download File: ' + filename, 'List Download All. Filter: ' + currentQueries.join(', '))
                                        this.update()
                                    })
                            } else {
                                this.download.enabled = false
                                this.buttons.downloadAll.loading = false
                                this.update()
                            }
                        })
                }, 3 * 1000)
            },
            downloadSelected (e) {
                const threshold = (e) ? false : this.download.threshold // trigger hanya jika dipanggil non component / dipanggil oleh function lain
                this.download.enabled = true
                if (threshold) this.buttons.downloadSimulate.loading = true
                else this.buttons.downloadSelected.loading = true
                this.update()
                const ids = Object.keys(this.tableComponents.selectedRows)
                    .map(id => {
                        return this.tableComponents.selectedRows[id] === true ? parseInt(id) : 0
                    })
                    .filter(x => x > 0)
                    .join()
                const type = threshold ? this.$('#download-simulated-type').value : this.$('#download-type').value
                if (!type) {
                    showAlertError(new Error('Download Type Required'))
                    this.buttons.downloadSelected.loading = false
                    this.buttons.downloadSimulate.loading = false
                    this.update()
                    return false
                }
                if (ids.length === 0 && (type !== 'list' && threshold)) {
                    showAlertError(new Error('No Data Selected'))
                    this.buttons.downloadSimulate.loading = false
                    this.update()
                    return false
                }
                const niks = this.listItems.filter(x => ids.indexOf(x.id) > -1).map(x => x.nik)
                if (type === 'detail') {
                    // download detail (xlsx) (regular or simulate)
                    this.downloadDetail({ids, threshold, niks})
                } else {
                    // download list (csv) (regular or simulate)
                    this.downloadRegular({ids, threshold, niks})
                }
            },
            downloadRegular({ ids, threshold, niks }) {
                setTimeout(() => {
                    FaceComparisonInquiryDownload({inquiry_ids: ids, threshold, filename: true}) // getting filename
                        .catch((err) => {
                            showAlertError(err)
                            return null
                        })
                        .then((res) => {
                            if (res) {
                                const filename = res.filename
                                if (!filename) {
                                    showAlertError(new Error('Invalid Given Filename From Server'))
                                    return null
                                }
                                const queries = {inquiry_ids: ids, threshold, sort_key: this.searchComponents.sort_key.value, sort_value: this.searchComponents.sort_value.value}
                                FaceComparisonInquiryDownload(queries)
                                    .catch((err) => {
                                        showAlertError(err)
                                        return null
                                    })
                                    .then((res) => {
                                        if (res) {
                                            downloadFile(res, filename)
                                            if (this.download.threshold) this.buttons.downloadSimulate.loading = false
                                            else this.buttons.downloadSelected.loading = false
                                            this.download.enabled = false
                                            this.update()

                                            // let currentQueries = []
                                            // for (const q in queries) {
                                            //     if (queries[q]) currentQueries.push(q + '=' + queries[q])
                                            // }
                                            let detail = 'List Download Selected. NIK: '
                                            if (threshold) detail = 'List Download Simulate. NIK: '
                                            this.logAgentActivity('Download File: ' + filename, detail + niks.join(', '))
                                        } else {
                                            if (this.download.threshold) this.buttons.downloadSimulate.loading = false
                                            else this.buttons.downloadSelected.loading = false
                                            this.download.enabled = false
                                            this.update()
                                        }
                                    })
                            } else {
                                if (this.download.threshold) this.buttons.downloadSimulate.loading = false
                                else this.buttons.downloadSelected.loading = false
                                this.download.enabled = false
                                this.update()
                            }
                        })
                }, 1)
            },
            downloadDetail({ ids, threshold, niks }) {
                setTimeout(() => {
                    FaceComparisonInquiryDetailDownload({inquiry_ids: ids, threshold, filename: true}) // getting filename
                        .catch((err) => {
                            showAlertError(err)
                            return null
                        })
                        .then((res) => {
                            if (res) {
                                const filename = res.filename
                                if (!filename) {
                                    showAlertError(new Error('Invalid Given Filename From Server'))
                                    return null
                                }
                                const queries = {inquiry_ids: ids, threshold, sort_key: this.searchComponents.sort_key.value, sort_value: this.searchComponents.sort_value.value}
                                FaceComparisonInquiryDetailDownload(queries)
                                    .catch((err) => {
                                        showAlertError(err)
                                        return null
                                    })
                                    .then((res) => {
                                        if (res) {
                                            downloadFile(res, filename)
                                            if (this.download.threshold) this.buttons.downloadSimulate.loading = false
                                            else this.buttons.downloadSelected.loading = false
                                            this.download.enabled = false
                                            this.update()

                                            // let currentQueries = []
                                            // for (const q in queries) {
                                            //     if (queries[q]) currentQueries.push(q + '=' + queries[q])
                                            // }
                                            this.logAgentActivity('Download File: ' + filename, 'List Download Detail. NIK: ' + niks.join(', '))
                                        } else {
                                            if (this.download.threshold) this.buttons.downloadSimulate.loading = false
                                            else this.buttons.downloadSelected.loading = false
                                            this.download.enabled = false
                                            this.update()
                                        }
                                    })
                            } else {
                                if (this.download.threshold) this.buttons.downloadSimulate.loading = false
                                else this.buttons.downloadSelected.loading = false
                                this.download.enabled = false
                                this.update()
                            }
                        })
                }, 1)
            },
            downloadWithThreshold() {
                const thr = this.$('#simulated-threshold').value
                if (parseInt(thr) > 0) {
                    this.download.threshold = parseInt(thr)
                    this.downloadSelected()
                    return false
                }
                return showAlertError(new Error('Threshold Should be 1 - 100'))
            },
            // Table Utilities
            doPrev() {
                if (this.searchComponents.page.value > 1 && this.searchComponents.page.value <= this.dataInformation.estimatedPages) {
                    this.searchComponents.page.value -= 1
                    this.tableComponents.selectedRows = {}
                    this.buttons.downloadSelected.disabled = true
                    this.checkPaginationButtons()
                    this.getList()
                }
            },
            doNext() {
                if (this.searchComponents.page.value < this.dataInformation.estimatedPages) {
                    this.searchComponents.page.value += 1
                    this.tableComponents.selectedRows = {}
                    this.buttons.downloadSelected.disabled = true
                    this.buttons.downloadAll.disabled = false
                    this.checkPaginationButtons()
                    this.getList()
                }
            },
            checkPaginationButtons() {
                const {estimatedPages} = this.dataInformation
                const {current: page} = this.pagination
                let hasNext=false, hasPrev=false
                if (estimatedPages > 1) {
                    if (page < estimatedPages) hasNext = true
                    if (page > 1 && estimatedPages > 1) hasPrev = true
                }
                this.pagination.hasNext = hasNext
                this.pagination.hasPrev = hasPrev
                this.update()
            },
            goToPage(e) {
                const value = parseInt(e.target.value)
                if (value) {
                    this.searchComponents.page.value = value
                    this.pagination.current = value
                    this.getList()
                }
            },
            toggleChecklist(inquiryId) {
                if (!inquiryId) return false
                const valueOfSimulateThreshold = this.$('#simulated-threshold').value
                this.tableComponents.selectedRows[inquiryId] = !this.tableComponents.selectedRows[inquiryId]
                const checked = Object.keys(this.tableComponents.selectedRows).filter(x => {
                    return this.tableComponents.selectedRows[x] === true
                })
                this.dataInformation.totalSelected = checked.length
                const regularType = this.getDownloadType('regular')
                this.buttons.downloadAll.disabled = false
                if (checked.length > 0) {
                    this.buttons.downloadSelected.disabled = true
                    this.buttons.downloadSimulate.disabled = true
                    if (regularType) this.buttons.downloadSelected.disabled = false
                    if (this.getDownloadType('simulate') && parseInt(valueOfSimulateThreshold) > 0) this.buttons.downloadSimulate.disabled = false
                    if (regularType === 'detail') this.buttons.downloadAll.disabled = true
                } else {
                    this.buttons.downloadSelected.disabled = true
                    this.buttons.downloadSimulate.disabled = true
                    this.buttons.downloadAll.disabled = true
                }
                this.tableComponents.checkall.isChecked = (checked.length === this.searchComponents.limit.value)
                this.update()
            },
            toggleCheckAll() {
                this.tableComponents.checkall.isChecked = !this.tableComponents.checkall.isChecked
                for (const inquiryId in this.tableComponents.selectedRows) {
                    this.tableComponents.selectedRows[inquiryId] = this.tableComponents.checkall.isChecked
                }
                const valueOfSimulateThreshold = this.$('#simulated-threshold').value
                const regularType = this.getDownloadType('regular')
                if (this.tableComponents.checkall.isChecked) {
                    this.buttons.downloadSelected.disabled = true
                    this.buttons.downloadSimulate.disabled = true
                    if (regularType) this.buttons.downloadSelected.disabled = false
                    if (this.getDownloadType('simulate') && parseInt(valueOfSimulateThreshold) > 0) this.buttons.downloadSimulate.disabled = false
                } else {
                    this.buttons.downloadSelected.disabled = true
                    this.buttons.downloadSimulate.disabled = true
                }
                if (regularType === 'detail') this.buttons.downloadAll.disabled = true
                else this.buttons.downloadAll.disabled = false
                this.dataInformation.totalSelected = 0
                if (this.tableComponents.checkall.isChecked) this.dataInformation.totalSelected = this.dataInformation.currentCount
                this.update()
            },
            getDownloadType(type='regular') {
                let downloadType = null
                if (type === 'simulate') downloadType = this.$('#download-simulated-type').value
                else downloadType = this.$('#download-type').value
                return downloadType
            },
            checkButtonDownloadSelected() {
                const valueOfType = this.getDownloadType('regular')
                this.buttons.downloadSelected.disabled = true
                if (valueOfType) {
                    if (valueOfType === 'detail') this.buttons.downloadAll.disabled = true
                    else this.buttons.downloadAll.disabled = false
                    const checked = Object.keys(this.tableComponents.selectedRows).filter(x => {
                        return this.tableComponents.selectedRows[x] === true
                    })
                    this.dataInformation.totalSelected = checked.length
                    if (checked.length > 0) {
                        this.buttons.downloadSelected.disabled = false
                    }
                }
                this.update()
            },
            checkButtonDownloadSelectedSimulate() {
                const valueOfType = this.getDownloadType('simulate')
                let valueOfSimulateThreshold = this.$('#simulated-threshold').value
                valueOfSimulateThreshold = parseInt(valueOfSimulateThreshold)
                if (valueOfSimulateThreshold > 100) {
                    this.$('#simulated-threshold').value = 100
                    return showAlertError(new Error('Threshold Maximum Is 100'))
                }
                this.buttons.downloadSimulate.disabled = true
                if (valueOfType && valueOfSimulateThreshold > 0) {
                    const checked = Object.keys(this.tableComponents.selectedRows).filter(x => {
                        return this.tableComponents.selectedRows[x] === true
                    })
                    this.dataInformation.totalSelected = checked.length
                    if (checked.length > 0) {
                        this.buttons.downloadSimulate.disabled = false
                    }
                }
                this.update()
            },
        }
    </script> 
</face-comparison-inquiry>
