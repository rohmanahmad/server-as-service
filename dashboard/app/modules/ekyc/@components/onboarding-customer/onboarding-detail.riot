<ekyc-onboarding-detail>
    <div class="wrapper2">
        <div class="row pd-t-10">
            <div class="col-12">Detail Information - { info.fullName || '-' }</div>
        </div>
        <div class="row pd-t-20 tx-11">
            <div class="col-12">
                <ul class="nav nav-tabs" id="tab1">
                    <li class="nav-item">
                    <a class="nav-link active" href="#detail" onclick="{(e) => activeTab(e, 'DETAIL')}">Onboarding Detail</a>
                    </li>
                    <li class="nav-item">
                    <a class="nav-link" href="#review" onclick="{(e) => activeTab(e, 'REVIEW')}">Review History</a>
                    </li>
                </ul>
            </div>
            <div class="col-12 pd-t-10">
                <div class="tab-content" id="myTabContent">
                    <div class="tab-pane fade show active" id="detail" role="tabpanel" aria-labelledby="detail-tab">
                        <div class="row" style="width: 100%;">
                            <div class="col-3 bd-r">
                                <div class="nav flex-column nav-pills" id="v-pills-tab" role="tablist" aria-orientation="vertical">
                                    <a each="{i in detail.groups}" class="nav-link {i.selected?'active':''}" onclick="{() => getGroupInformation(i.title)}" id="{i.title}-tab" data-toggle="pill" href="#sub-detail-{i.title}" role="tab" aria-controls="{i.title}" aria-selected="true">{i.title}</a>
                                </div>
                            </div>
                            <div class="col-9 bd-l">
                                <div class="tab-content overflow-auto" style="height: 306px;" id="v-pills-tabContent">
                                    <div class="tab-pane fade {g.selected?'show active':''}" each="{g in detail.groups}" id="sub-detail-{g.title}" role="tabpanel" aria-labelledby="v-{g.title}-tab">
                                        <table class="table table-bordered table-hover">
                                            <tr each="{key in Object.keys(g.item)}">
                                                <th style="padding: 8px;" class="tx-11 wd-150">{key}</th>
                                                <td style="padding: 8px;" class="tx-11">{g.item[key]}</td>
                                            </tr>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="review" role="tabpanel" aria-labelledby="review-tab">
                        <div class="row">
                            <div class="col-12">
                                <button class="btn btn-primary btn-sm float-right mg-b-10" onclick="{sync}">
                                    <span if="{!tableComponents.loadingList}">Refresh</span>
                                    <span if="{tableComponents.loadingList}" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span if="{tableComponents.loadingList}">Loading...</span>
                                </button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12 overflow-auto">
                                <div style="width: 1150px; height: 290px;">
                                    <table class="table table-hover table-bordered bd">
                                        <tr>
                                            <th class="tx-11" style="padding: 8px; width: 50px;">
                                                <input type="checkbox" id="checkall" class="float-left mg-r-5" checked="{tableComponents.checkall.isChecked}" onclick="{toggleCheckAll}">
                                                <span class="tx-9 float-left">#</span>
                                            </th>
                                            <th class="tx-11" style="padding: 8px;" width="120">
                                                <div class="wrapper2 float-left pd-l-2" onclick="{() => doSort('createdAt')}">
                                                    <div class="top wd-10  { searchComponents.sort_key.value === 'createdAt' && searchComponents.sort_value.value === 'asc' ? 'text-warning' : '' }">
                                                        <i class="pointer ion-arrow-up-b tx-8"></i>
                                                    </div>
                                                    <div class="bottom wd-10 float-bottom { searchComponents.sort_key.value === 'createdAt' && searchComponents.sort_value.value === 'desc' ? 'text-warning' : '' }">
                                                        <i class="pointer ion-arrow-down-b tx-8"></i>
                                                    </div>
                                                </div>
                                                <span class="float-left mg-l-2 pd-t-2 tx-10">Review Date</span>
                                            </th>
                                            <th class="tx-11" style="padding: 8px;" width="100">
                                                <div class="wrapper2 float-left pd-l-2" onclick="{() => doSort('createdBy')}">
                                                    <div class="top wd-10  { searchComponents.sort_key.value === 'createdBy' && searchComponents.sort_value.value === 'asc' ? 'text-warning' : '' }">
                                                        <i class="pointer ion-arrow-up-b tx-8"></i>
                                                    </div>
                                                    <div class="bottom wd-10 float-bottom { searchComponents.sort_key.value === 'createdBy' && searchComponents.sort_value.value === 'desc' ? 'text-warning' : '' }">
                                                        <i class="pointer ion-arrow-down-b tx-8"></i>
                                                    </div>
                                                </div>
                                                <span class="float-left mg-l-2 pd-t-2 tx-10">Review By</span>
                                                <div class="wrapper-filter-and-search wd-10 text-right pd-t-3 float-right mg-r-5" id="review_by">
                                                    <i class="pointer ion-search tx-12 { searchComponents.search.review_by.inUse ? 'text-warning' : '' }"></i>
                                                </div>
                                            </th>
                                            <th class="tx-11" style="padding: 8px;" width="120">
                                                <div class="wrapper2 float-left pd-l-2" onclick="{() => doSort('status')}">
                                                    <div class="top wd-10  { searchComponents.sort_key.value === 'status' && searchComponents.sort_value.value === 'asc' ? 'text-warning' : '' }">
                                                        <i class="pointer ion-arrow-up-b tx-8"></i>
                                                    </div>
                                                    <div class="bottom wd-10 float-bottom { searchComponents.sort_key.value === 'status' && searchComponents.sort_value.value === 'desc' ? 'text-warning' : '' }">
                                                        <i class="pointer ion-arrow-down-b tx-8"></i>
                                                    </div>
                                                </div>
                                                <span class="float-left mg-l-2 pd-t-2 tx-10">Review Status</span>
                                                <div class="wrapper-filter-and-search wd-10 text-right pd-t-3 float-right mg-r-5" id="filter_review_status">
                                                    <i class="pointer ion-funnel tx-12 { searchComponents.filter.review_status.inUse ? 'text-warning' : '' }"></i>
                                                </div>
                                            </th>
                                            <th class="tx-11" style="padding: 8px;" width="120">
                                                <div class="wrapper2 float-left pd-l-2" onclick="{() => doSort('type')}">
                                                    <div class="top wd-10  { searchComponents.sort_key.value === 'type' && searchComponents.sort_value.value === 'asc' ? 'text-warning' : '' }">
                                                        <i class="pointer ion-arrow-up-b tx-8"></i>
                                                    </div>
                                                    <div class="bottom wd-10 float-bottom { searchComponents.sort_key.value === 'type' && searchComponents.sort_value.value === 'desc' ? 'text-warning' : '' }">
                                                        <i class="pointer ion-arrow-down-b tx-8"></i>
                                                    </div>
                                                </div>
                                                <span class="float-left mg-l-2 pd-t-2 tx-10">Review Type</span>
                                                <div class="wrapper-filter-and-search wd-10 text-right pd-t-3 float-right mg-r-5" id="filter_review_type">
                                                    <i class="pointer ion-funnel tx-12 { searchComponents.filter.review_type.inUse ? 'text-warning' : '' }"></i>
                                                </div>
                                            </th>
                                            <th class="tx-11" style="padding: 8px;" width="140">
                                                <div class="wrapper2 float-left pd-l-2" onclick="{() => doSort('escalationReason')}">
                                                    <div class="top wd-10  { searchComponents.sort_key.value === 'escalationReason' && searchComponents.sort_value.value === 'asc' ? 'text-warning' : '' }">
                                                        <i class="pointer ion-arrow-up-b tx-8"></i>
                                                    </div>
                                                    <div class="bottom wd-10 float-bottom { searchComponents.sort_key.value === 'escalationReason' && searchComponents.sort_value.value === 'desc' ? 'text-warning' : '' }">
                                                        <i class="pointer ion-arrow-down-b tx-8"></i>
                                                    </div>
                                                </div>
                                                <span class="float-left mg-l-2 pd-t-2 tx-10">Escalation Reason</span>
                                                <div class="wrapper-filter-and-search wd-10 text-right pd-t-3 float-right mg-r-5" id="filter_escalation_reason">
                                                    <i class="pointer ion-funnel tx-12 { searchComponents.filter.escalation_reason.inUse ? 'text-warning' : '' }"></i>
                                                </div>
                                            </th>
                                            <th class="tx-11" style="padding: 8px;">
                                                <div class="wrapper2 float-left pd-l-2" onclick="{() => doSort('escalationTo')}">
                                                    <div class="top wd-10  { searchComponents.sort_key.value === 'escalationTo' && searchComponents.sort_value.value === 'asc' ? 'text-warning' : '' }">
                                                        <i class="pointer ion-arrow-up-b tx-8"></i>
                                                    </div>
                                                    <div class="bottom wd-10 float-bottom { searchComponents.sort_key.value === 'escalationTo' && searchComponents.sort_value.value === 'desc' ? 'text-warning' : '' }">
                                                        <i class="pointer ion-arrow-down-b tx-8"></i>
                                                    </div>
                                                </div>
                                                <span class="float-left mg-l-2 pd-t-2 tx-10">Escalation To</span>
                                                <div class="wrapper-filter-and-search wd-10 text-right pd-t-3 float-right mg-r-5" id="filter_escalation_to">
                                                    <i class="pointer ion-funnel tx-12 { searchComponents.filter.escalation_to.inUse ? 'text-warning' : '' }"></i>
                                                </div>
                                            </th>
                                            <th class="tx-11" style="padding: 8px;">
                                                <div class="wrapper2 float-left pd-l-2" onclick="{() => doSort('notes')}">
                                                    <div class="top wd-10  { searchComponents.sort_key.value === 'notes' && searchComponents.sort_value.value === 'asc' ? 'text-warning' : '' }">
                                                        <i class="pointer ion-arrow-up-b tx-8"></i>
                                                    </div>
                                                    <div class="bottom wd-10 float-bottom { searchComponents.sort_key.value === 'notes' && searchComponents.sort_value.value === 'desc' ? 'text-warning' : '' }">
                                                        <i class="pointer ion-arrow-down-b tx-8"></i>
                                                    </div>
                                                </div>
                                                <span class="float-left mg-l-2 pd-t-2 tx-10">Review Note</span>
                                                <div class="wrapper-filter-and-search wd-10 text-right pd-t-3 float-right mg-r-5" id="notes">
                                                    <i class="pointer ion-search tx-12 { searchComponents.search.notes.inUse ? 'text-warning' : '' }"></i>
                                                </div>
                                            </th>
                                        </tr>
                                        <tr if="{tableComponents.loadingList}">
                                            <td colspan="8" class="text-center tx-11">Loading...</td>
                                        </tr>
                                        <tr if="{detail.reviews.items.length > 0 && !tableComponents.loadingList}" each="{reviewItem in detail.reviews.items}">
                                            <td class="tx-11" style="padding: 8px;">
                                                <div class="wrapper2 float-left">
                                                    <input
                                                        type="checkbox"
                                                        id="checkall"
                                                        checked="{tableComponents.selectedRows[reviewItem.id]}"
                                                        onclick="{() => toggleChecklist(reviewItem.id)}"
                                                        id="check-{reviewItem.id}">
                                                </div>
                                                <span class="mg-l-5 float-left tx-10">{ reviewItem.n }</span>
                                            </td>
                                            <td class="tx-11" style="padding: 8px;">{ reviewItem.reviewDate }</td>
                                            <td class="tx-11" style="padding: 8px;">{ reviewItem.createdBy }</td>
                                            <td class="tx-11" style="padding: 8px;">{ reviewItem.status }</td>
                                            <td class="tx-11" style="padding: 8px;">{ reviewItem.type }</td>
                                            <td class="tx-11" style="padding: 8px;">{ reviewItem.escalationReason }</td>
                                            <td class="tx-11" style="padding: 8px;">
                                                <span each="{ eT in reviewItem.escalationTo }" class="d-block">{ eT }</span><br>
                                            </td>
                                            <td class="tx-11" style="padding: 8px;">{ reviewItem.notes }</td>
                                        </tr>
                                        <tr if="{detail.reviews.items.length === 0 && !tableComponents.loadingList}">
                                            <td colspan="8" class="text-center tx-11">No Data Found</td>
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row bd-t pd-t-20">
            <div class="col-sm-6">
                <label>Download</label><br>
                <div class="form-inline">
                    <select class="form-control float-left tx-11" id="download-type">
                        <option value="">Download Type</option>
                        <option value="detail">Onboarding Customer - Detail</option>
                        <option value="reviews">Review History</option>
                    </select>
                    <button
                        disabled="{!button.is_ready || download.inprogress ? 'true' : ''}"
                        class="btn btn-primary tx-11 float-left mg-r-5 mg-l-5"
                        onclick="{downloadXLS}">
                            <span if="{!download.inprogress}">Download</span>
                            <span if="{download.inprogress}" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span if="{download.inprogress}">Loading...</span>
                    </button>
                </div>
            </div>
            <div class="col-sm-6 pd-t-30" if="{['vc-review', 'fraud-review'].indexOf(info.reviewType) > -1}">
                <!-- <label class="float-right">Download Review</label><br> -->
                <!-- <button class="btn btn-primary float-right tx-11 mg-r-5 mg-l-5" if="{info.reviewType === 'fraud-review'}" onclick="{downloadFraudEscalationXLS}">Download Fraud Escalation</button>
                <button class="btn btn-primary float-right tx-11 mg-r-5 mg-l-5" if="{info.reviewType === 'vc-review'}" onclick="{downloadVideoCallReviewXLS}">Download Video Call</button> -->
            </div>
        </div>
    </div>
    <style>
        .alert-download {
            bottom: 0px;
            right: 0px;
        }
    </style>
    <script>
        import {
            cancelAllRequest,
        } from 'services/SDK/main'
        import {
            createAgentActivity
        } from 'appModule/agents/agent-activity.sdk'
        import {
            ComMoOnBoardingDetail,
            ComMoOnBoardingDownloadDetail,
            ComMoOnBoardingReviewSync,
            ComMoOnBoardingReview,
            ComMoOnBoardingReviewFilters,
            ComMoOnBoardingDownloadReview,
        } from 'appModule/ekyc/ekyc.sdk'
        import riot from 'riot'
        import { result, set } from 'lodash'
        import { showAlertError, showAlertSuccess, debugLog } from 'helpers/utilities'
        import downloadFile from 'js-file-download'
        import { findIndex } from 'lodash'
        import { getStorage, changeStorage } from 'helpers/storage'
        const acceptedType = ['BASIC_INFO', 'DUKCAPIL', 'FACE_COMPARISON', 'FACE_DEDUP', 'VIDEO_CALL'] 
        export default {
            info: {},
            download: {},
            button: {},
            tableComponents: {},
            searchComponents: {
                sort_key: {value: 'createdAt'},
                sort_value: {value: 'desc'},
                filter: {
                    review_date: { value: '', inUse: false },
                    review_status: { value: '', inUse: false, items: [] },
                    review_type: { value: '', inUse: false, items: [] },
                    escalation_reason: { value: '', inUse: false, items: [] },
                    escalation_to: { value: '', inUse: false, items: [] },
                },
                search: {
                    session_id: { value: '' },
                    review_by: { value: '', inUse: false },
                    notes: { value: '', inUse: false },
                }
            },
            detail: {
                groups: [
                    {
                        title: 'BASIC_INFO',
                        endpoint_link: '',
                        selected: true,
                        item: {
                            onboardingDate: '-',
                            onboardingSessionId: '-',
                            fullName: '-',
                            nik: '-',
                            placeOfBirth: '-',
                            dateOfBirth: '-',
                            motherMaidenName: '-',
                            adress: '-',
                            city: '-',
                            subDistrict: '-',
                            district: '-',
                            province: '-',
                            phoneNo: '-',
                            email: '-',
                            deviceId: '-',
                            jobTitle: '-',
                            companyName: '-',
                            lob: '-',
                            companyPhoneNo: '-',
                            companyAddress: '-',
                            cifNo: '-',
                            incomeSource: '-',
                            taxNo: '-',
                            incomeRange: '-',
                            monthTransAmtCred: '-',
                            monthTransAmtDeb: '-',
                            monthTransFreqCred: '-',
                            monthTransFreqDeb: '-',
                            pep: '-',
                            purposeOpening: '-',
                            riskLevel: '-',
                            userName: '-',
                            completionStage: '-',
                            dropType: '-'
                        }
                    },
                    {
                        title: 'DUKCAPIL',
                        endpoint_link: '',
                        selected: false,
                        item: {
                            nik: '-',
                            nikMatched: '-',
                            fullName: '-',
                            originalFullNameMatched: '-',
                            placeOfBirth: '-',
                            placeOfBirthMatched: '-',
                            dateOfBirth: '-',
                            dateOfBirthMatched: '-',
                            gender: '-',
                            genderMatched: '-',
                            address: '-',
                            addressMatched: '-',
                            rtNumber: '-',
                            rtNumberMatched: '-',
                            rwNumber: '-',
                            rwNumberMatched: '-',
                            province: '-',
                            provinceMatched: '-',
                            city: '-',
                            cityMatched: '-',
                            district: '-',
                            districtMatched: '-',
                            subDistrict: '-',
                            subDistrictMatched: '-',
                            postcode: '-',
                            postcodeMatched: '-',
                            motherMaidenName: '-',
                            motherMaidenNameMatched: '-',
                            religion: '-',
                            religionMatched: '-',
                            occupation: '-',
                            occupationMatched: '-',
                            maritalStatus: '-',
                            maritalStatusMatched: '-',
                            familyCardNumber: '-',
                            urbanVillageNumber: '-',
                            subDistrictNumber: '-',
                            provinceCode: '-',
                            districtCode: '-',
                            lastEducation: '-',
                            verifyStatus: '-',
                            verifyResult: '-'
                        }
                    },
                    {
                        title: 'FACE_COMPARISON',
                        endpoint_link: '',
                        selected: false,
                        item: {
                            createdDate: '-',
                            nik: '-',
                            channelName: '-',
                            userName: '-',
                            threshold: '-',
                            percentage: '-',
                            result: '-',
                            ektpImage: '-',
                            selfieImage: '-'
                        }
                    },
                    {
                        title: 'FACE_DEDUP',
                        endpoint_link: '',
                        selected: false,
                        item: {
                            verihubsClientId: '-',
                            sessionId: '-',
                            mediaId: '-',
                            status: '-'
                        }
                    },
                    {
                        title: 'VIDEO_CALL',
                        endpoint_link: '',
                        selected: false,
                        item: {
                            vdcDate: '-',
                            id: '-',
                            interactionId: '-',
                            isGoodEnvironment: '-',
                            verificationCustface: '-',
                            verificationEktp: '-',
                            nik: '-',
                            fullName: '-',
                            placeDateOfBirth: '-',
                            gender: '-',
                            address: '-',
                            rtRw: '-',
                            subDistrict: '-',
                            district: '-',
                            city: '-',
                            province: '-',
                            motherMaidenName: '-',
                            signature: '-',
                            vdcAgentNotes: '-',
                            checklistResult: '-',
                            vdcStatus: '-'
                        }
                    }
                ],
                reviews: {
                    items: [
                        // {
                        //     "n": 1,
                        //     "id": 50,
                        //     "reviewDate": '2020/02/23 22:00:12',
                        //     "createdBy": 'Fahmi 1',
                        //     "onBoardingSessionId": "0e7a9c41-79df-4d2d-93e7-7e2e92d24b41",
                        //     "status": "FRAUD",
                        //     "type": "VIDEO_CALL",
                        //     "escalationReason": "REJECT_CUSTOMER",
                        //     "escalationTo": "AML_COMPLIANCE",
                        //     "notes": "string"
                        // }
                    ]
                }
            },
            onMounted() {
                this.init()
                this.sync()
                this.logAgentActivity('Open Detail Screen', '')
            },
            onBeforeUnmount() {
                cancelAllRequest()
                this.emptyStorage()
                changeStorage({'SESSION_ID': ''}, 'ON-BOARDING')
            },
            onBeforeMount() {
                this.emptyStorage()
                window.onboDoFilter = this.doFilter
                window.onboSearch = this.search
                window.onboSetDefaultSearchValue = this.setDefaultSearchValue
                this.tableComponents = {
                    noData: false,
                    checkall: {
                        isChecked: false
                    },
                    totalPerPage: 0,
                    selectedRows: {},
                    loadingList: false
                }
                this.download = {
                    currentDownload: 'Detail',
                    inprogress: false
                }
                this.info = {
                    sessionId: null,
                    reviewType: null,
                    fullName: null // diupdate ketika mendapatkan data dari dukcapil
                }
                this.initColumsFilter('review_type', 'filter_review_type', [this.searchComponents.filter.review_type.value])
                this.initColumsSearch()
            },
            logAgentActivity(action, detail) {
                createAgentActivity({
                    module: 'CommBank Mobile - OnBoarding',
                    action,
                    detail
                })
            },
            emptyStorage() {
                acceptedType.forEach(c => {
                    const k = `DETAIL-${c}`
                    changeStorage({[k]: ''}, 'ON-BOARDING')
                })
            },
            init() {
                const reviewType = this.props.reviewtype
                this.info.reviewType = reviewType
                this.info.fullName = 'loading...'
                this.info.sessionId = getStorage('SESSION_ID', 'ON-BOARDING')
                this.searchComponents.search.session_id.value = this.info.sessionId
                this.searchComponents.filter.review_type.value = reviewType === 'vc-review' ? 'VIDEO_CALL' : (reviewType === 'fraud-review' ? 'FRAUD' : '')
                this.button.is_ready = false
                this.update()
                this.getGroupInformation('BASIC_INFO').catch(console.error)
            },
            setDefaultSearchValue(name, id) {
                return () => {
                    const defaultValue = this.searchComponents.search[name].value
                    setTimeout(() => { // harus menggunakan setTimeout, krn tidak bisa berubah hasil nya kalau gak di timeout dlu. entahlah
                        $(`#${id}`).val(defaultValue)
                    }, 1)
                }
            },
            initColumsFilter(name, itemSelector, listItems=[]) {
                const checkedItems = this.searchComponents.filter[name].selected || []
                let template = `<ul class="list-group" style="max-height: 200px; overflow: auto;">`
                for (const itemValue of listItems) {
                    const checked = (checkedItems.indexOf(itemValue) > -1)
                    template += `<li class="list-group-item pd-5">
                        <input class="float-left input-filter-${name}" value="${itemValue}" checked="${checked}" style="padding: 10px;" type="checkbox">
                        <span class="float-left pd-t-0 pd-l-10 tx-10">${itemValue}<span>
                    </li>`
                }
                template += `<li class="list-group-item pd-5">
                    <button class="btn btn-primary wd-50 float-right tx-10 pd-5" onclick="window.onboDoFilter('${name}')">Filter</button>
                </li>`
                template += `</ul>`
                $(`#${itemSelector}`).popover({
                    trigger: 'click',
                    container: 'body',
                    content: template,
                    html: true,
                    // template: `<input type="text" class="form-control" placeholder="search" id="input-${searchItem}">`,
                    placement: 'bottom'
                })
            },
            initColumsSearch() {
                const itemSearchIds = [
                    'review_by',
                    'notes'
                ]
                for (const name of itemSearchIds) {
                    const inputId = `input-search-${name}`
                    const id = `#${name}`
                    $(id).popover({
                        trigger: 'click',
                        container: 'body',
                        content: `<input type="text" class="form-control pd-5 tx-10 float-left h-auto" placeholder="search" id="${inputId}">
                            <br>
                            <button class="btn btn-primary wd-50 float-right tx-10 pd-5 mg-3" onclick="window.onboSearch('${name}')">Search</button>`,
                        html: true,
                        // template: `<input type="text" class="form-control" placeholder="search" id="input-${name}">`,
                        placement: 'bottom'
                    })
                    $(id).on('show.bs.popover', window.onboSetDefaultSearchValue(name, inputId))
                }
            },
            search(name) {
                const v = result($(`#input-search-${name}`), '[0].value', '')
                let d = {value: '', inUse: false}
                if (v && v.length > 0) d = {value: v, inUse: true}
                this.searchComponents.search[name] = d
                this.getReviewData().catch(console.error)
            },
            sync() {
                this.tableComponents.loadingList = true
                this.update()
                ComMoOnBoardingReviewSync({
                    session_id: this.info.sessionId
                })
                    .then(() => {
                        this.tableComponents.loadingList = false
                        this.update()
                        this.search()
                    })
                    .catch((err) => {
                        showAlertError(err)
                        this.tableComponents.loadingList = false
                        this.update()
                    })
            },
            activeTab(e, type) {
                e.preventDefault()
                $(e.target).tab('show')
                if (type === 'REVIEW') {
                    this.getReviewData().catch(console.error) 
                }
                this.download.currentDownload = type === 'REVIEW' ? 'History' : 'Detail'
                this.update()
            },
            /* SORTING */
            doSort(type) {
                this.searchComponents.sort_key.value = type
                if (this.searchComponents.sort_value.value === 'desc') this.searchComponents.sort_value.value = 'asc'
                else if (this.searchComponents.sort_value.value === 'asc') this.searchComponents.sort_value.value = 'desc'
                this.getReviewData()
            },
            doFilter(name) {
                const selected = []
                const sel = $(`.input-filter-${name}`).each(function () {
                    const isChecked = $(this).is(':checked')
                    if(isChecked) {
                        selected.push($(this).val())
                    }
                })
                this.searchComponents.filter[name].selected = selected
                this.searchComponents.filter[name].inUse = (selected.length > 0)
                this.searchComponents.filter[name].value = selected.join(',')
                this.getReviewData()
            },
            setFilters ({reasons, escalationTo, statuses}) {
                if (reasons) {
                    this.searchComponents.filter.escalation_reason.items = reasons
                    this.initColumsFilter('escalation_reason', 'filter_escalation_reason', reasons)
                }
                if (escalationTo) {
                    this.searchComponents.filter.escalation_to.items = escalationTo
                    this.initColumsFilter('escalation_to', 'filter_escalation_to', escalationTo)
                }
                if (statuses) {
                    this.searchComponents.filter.review_status.items = statuses
                    this.initColumsFilter('review_status', 'filter_review_status', statuses)
                }
                this.update()
            },
            /**
             * dipanggil di component tag
             */
            async getGroupInformation (type) {
                try {
                    const indexOfGroup = findIndex(this.detail.groups, { title: type })
                    if (acceptedType.indexOf(type) === -1) throw new Error('Invalid TYPE') 
                    if (indexOfGroup === -1) throw new Error('Invalid Group TYPE')
                    const payload = {onboarding_type: type, session_id: this.info.sessionId}
                    const keyType = `DETAIL-${type}`
                    const m = result(this.detail, `groups[${indexOfGroup}]['item']`, {})
                    for (const i in m) {
                        m[i] = 'loading...'
                    }
                    this.update()
                    let storageItem = getStorage(keyType, 'ON-BOARDING', '')
                    let item = {}
                    try {
                        item = JSON.parse(storageItem)
                    } catch (err) {
                        debugLog(err)
                    }
                    if (Object.keys(item).length === 0) {
                        const { data } = await ComMoOnBoardingDetail(payload)
                        item = (data.item || {})
                        const fullname = result(this.info, 'fullName')
                        if (type === 'BASIC_INFO' && !fullname) {
                            set(this.info, 'fullName', fullname || '-')
                        }
                        // untuk face comparison dan 2 lainnya dibawah ini tidak disimpan dalam storage krn mungkin akan berubah sangat cepat
                        if (['FACE_COMPARISON', 'FACE_DEDUP', 'VIDEO_CALL'].indexOf(type) === -1 && Object.keys(item).length > 0) {
                            changeStorage({ [keyType]: JSON.stringify(item) }, 'ON-BOARDING')
                        }
                    }
                    const map = result(this.detail, `groups[${indexOfGroup}]['item']`, {})
                    for (const it in map) {
                        this.detail.groups[indexOfGroup]['item'][it] = result(item, it, '-')
                    }
                    if (type === 'BASIC_INFO') {
                        this.info.fullName = result(item, 'fullName', '-')
                    }
                    this.button.is_ready = true
                    this.update()
                } catch (err) {
                    showAlertError(err)
                    if (window.run_debug) if (window.run_debug) debugger
                }
            },
            getQuery() {
                let queries = {}
                const sc = this.searchComponents
                for (const x in sc) {
                    if (['search', 'filter'].indexOf(x) > -1) {
                        for (const key in sc[x]) {
                            if (key && key !== 'undefined') queries[key] = result(sc[x], `${key}.value`)
                        }
                        continue
                    }
                    queries[x] = result(sc, `${x}.value`)
                }
                changeStorage({'DETAIL_SEARCH_QUERIES': JSON.stringify(this.searchComponents)}, 'ON-BOARDING')
                return queries
            },
            async getReviewData() {
                try {
                    this.tableComponents.loadingList = true
                    this.update()
                    const queries = this.getQuery()
                    const response = await ComMoOnBoardingReview(queries)
                    const items = result(response, 'data.items', [])
                    const sizeItem = items.length
                    this.tableComponents.totalPerPage = sizeItem
                    this.detail.reviews.items = items
                    this.tableComponents.selectedRows = items.reduce((r, x) => {
                        r[x.id] = false
                        return r
                    }, {})
                    const filters = await ComMoOnBoardingReviewFilters(queries)
                    this.setFilters(result(filters, 'data.items', {}))
                    this.tableComponents.loadingList = false
                    this.update()
                } catch (err) {
                    showAlertError(err)
                }
            },
            downloadXLS() {
                let currentDownload = this.$('#download-type').value
                currentDownload = currentDownload.toLowerCase()
                this.download.inprogress = true
                this.update()
                setTimeout(() => {
                    if (['reviews'].indexOf(currentDownload) > -1) {
                        const queries = this.getQuery()
                        const fullname = this.info.fullName
                        const reviewIds = Object.keys(this.tableComponents.selectedRows).filter(x => this.tableComponents.selectedRows[x])
                        const selected = reviewIds.length > 0
                        const reviewType = currentDownload
                        ComMoOnBoardingDownloadReview({...queries, fullname, filename: true, reviewType})
                            .catch((err) => {
                                showAlertError(err)
                                this.download.inprogress = false
                                this.update()
                                return null
                            })
                            .then((res) => {
                                if (res) {
                                    const filename = res.filename
                                    const payload = {...queries, reviewIds: reviewIds.join(','), fullname, reviewType}
                                    ComMoOnBoardingDownloadReview(payload)
                                        .catch((err) => {
                                            showAlertError(err)
                                            this.download.inprogress = false
                                            this.update()
                                            return null
                                        })
                                        .then((file) => {
                                            downloadFile(file, filename)
                                            this.download.inprogress = false
                                            this.update()
                                            this.logAgentActivity('Download File: ' + filename, 'OnBoarding_Session_Id: ' + payload.session_id)
                                        })
                                } else {
                                    this.download.inprogress = false
                                    this.update()
                                }
                            })
                    } else {
                        ComMoOnBoardingDownloadDetail({session_id: this.info.sessionId, filename: true})
                            .catch((err) => {
                                showAlertError(err) 
                                this.download.inprogress = false
                                this.update()
                                return null
                            })
                            .then((res) => {
                                if (res) {
                                    const filename = res.filename
                                    ComMoOnBoardingDownloadDetail({session_id: this.info.sessionId})
                                        .catch((err2) => {
                                            showAlertError(err2)
                                            this.download.inprogress = false
                                            this.update()
                                            return null
                                        })
                                        .then((file) => {
                                            if (file) {
                                                downloadFile(file, filename)
                                                this.download.inprogress = false
                                                this.update()
                                            }
                                            this.download.inprogress = false
                                            this.update()
                                            this.logAgentActivity('Download File: ' + filename, 'OnBoarding_Session_Id: ' + this.info.sessionId)
                                        })
                                } else {
                                    this.download.inprogress = false
                                    this.update()
                                }
                            })
                    }
                }, 1)
            },
            downloadFraudEscalationXLS() {
                alert('work')
            },
            downloadVideoCallReviewXLS() {
                alert('work')
            },
            toggleChecklist(reviewId) {
                if (!reviewId) return false
                this.tableComponents.selectedRows[reviewId] = !this.tableComponents.selectedRows[reviewId]
                const isAll = Object.keys(this.tableComponents.selectedRows).filter(x => {
                    return this.tableComponents.selectedRows[x] === true
                })
                this.tableComponents.checkall.isChecked = (isAll.length === this.tableComponents.totalPerPage)
                this.update()
            },
            toggleCheckAll() {
                this.tableComponents.checkall.isChecked = !this.tableComponents.checkall.isChecked
                for (const reviewId in this.tableComponents.selectedRows) {
                    this.tableComponents.selectedRows[reviewId] = this.tableComponents.checkall.isChecked
                }
                this.update()
            },
        }
    </script>
</ekyc-onboarding-detail>