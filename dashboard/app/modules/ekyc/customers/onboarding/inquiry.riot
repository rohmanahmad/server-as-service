<onbo-inquiry>
    <div class="br-mainpanel">
        <div class="br-pageheader">
            <nav class="breadcrumb pd-0 mg-0 tx-12">
                <span class="breadcrumb-item">Commbank Mobile</span>
                <span class="breadcrumb-item">On Boarding</span>
                <span class="breadcrumb-item active">List</span>
            </nav>
        </div>
        <div class="br-pagebody pd-r-5 pd-l-5 mg-t-10">
            <div class="br-section-wrapper pd-x-10 pd-sm-x-30 pd-t-40">
                <div class="row">
                    <div class="col-sm-7">
                        <!-- <div class="form-inline"> -->
                            <input type="text" class="form-control mr-sm-2 float-left tx-12" style="width: 70%;" id="search" placeholder="Search Something" value="{searchComponents.search_all.value}">
                            <button disabled="{searchComponents.search_all.loading ? 'true' : ''}" type="button" class="btn btn-primary float-left" onclick="{searchByQuery}">
                                <span if="{!searchComponents.search_all.loading}">Search</span>
                                <span if="{searchComponents.search_all.loading}" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span if="{searchComponents.search_all.loading}">Searching...</span>
                            </button>
                        <!-- </div> -->
                    </div>
                    <div class="col-sm-5">
                        <div class="input-group wd-350 float-right">
                            <input type="text" class="form-control tx-12 float-right" value="{searchComponents.fromDate.value} - {searchComponents.endDate.value}" id="date1">
                            <div class="input-group-append">
                                <span class="input-group-text" id="basic-addon2">
                                    <i class="ion-calendar"></i>
                                </span>
                            </div>
                            <div class="input-group-append">
                                <div class="input-group-text" id="basic-addon2">
                                    <input type="checkbox" id="all-time" onclick="{toggleAllDate}" checked="{searchComponents.allTime}">
                                    <span class="tx-12 pd-l-2">All</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row pd-t-20 pd-l-0">
                    <div class="col-12 pd-b-10">
                        <label class="pd-5 tx-10 float-left">
                            Display Record
                            {dataInformation.startNumber} - {dataInformation.endNumber}
                            out of {dataInformation.totalDocuments}
                            ({dataInformation.totalSelected} selected out of
                            {dataInformation.totalList} rows)</label>
                        <button disabled="{sync.is_syncronizing ? 'true' : ''}" class="btn btn-success pd-t-5 pd-b-5 pd-r-20 pd-l-20 tx-10 float-right" onclick="{sync}">
                            <span if="{!sync.is_syncronizing}">Sync</span>
                            <span if="{sync.is_syncronizing}" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span if="{sync.is_syncronizing}">Syncrhonizing ({sync.progess_percentage}%)...</span>
                        </button>
                        <label class="pd-5 tx-10 float-right">{ sync.last_sync }</label>
                    </div>
                    <div class="col-12 text-center pd-t-10 pd-r-0 pd-l-0 overflow-auto">
                        <table class="table table-bordered table-inquiry table-hover bd">
                            <thead>
                                <tr>
                                    <th style="padding-left: 5px; padding-right: 1px; min-width:40px;">
                                        <input type="checkbox" id="checkall" class="float-left mg-r-5" checked="{tableComponents.checkall.isChecked}" onclick="{toggleCheckAll}">
                                        <span class="tx-9 float-left">#</span>
                                    </th>
                                    <th style="padding-left: 1px; padding-right: 1px; min-width:120px;">
                                        <div class="wrapper float-left pd-l-2 pointer" onclick="{() => doSort('onBoardingLastModified')}">
                                            <div class="top wd-10 { (searchComponents.sort_key.value === 'onBoardingLastModified' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-up-b tx-8"></i>
                                            </div>
                                            <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'onBoardingLastModified' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-down-b tx-8"></i>
                                            </div>
                                        </div>
                                        <span class="float-left mg-l-2 pd-t-2 tx-10">Last Modified</span>
                                    </th>
                                    <th style="padding-left: 1px; padding-right: 1px; min-width:150px;">
                                        <div class="wrapper float-left pd-l-2 pointer" onclick="{() => doSort('cmId')}">
                                            <div class="top wd-10 { (searchComponents.sort_key.value === 'cmId' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-up-b tx-8"></i>
                                            </div>
                                            <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'cmId' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-down-b tx-8"></i>
                                            </div>
                                        </div>
                                        <span class="float-left mg-l-2 pd-t-2 tx-10">CM ID</span>
                                        <div class="popover-filter wrapper-filter-and-search wd-10 text-right pd-t-3 float-right mg-r-5" id="search-CM_ID" tabindex="0">
                                            <i class="ion-search pointer tx-12 { searchComponents.search.CM_ID.inUse ? 'text-warning' : '' }"></i>
                                        </div>
                                    </th>
                                    <th style="padding-left: 1px; padding-right: 1px; min-width:150px;">
                                        <div class="wrapper float-left pd-l-2 pointer" onclick="{() => doSort('nik')}">
                                            <div class="top wd-10 { (searchComponents.sort_key.value === 'nik' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-up-b tx-8"></i>
                                            </div>
                                            <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'nik' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-down-b tx-8"></i>
                                            </div>
                                        </div>
                                        <span class="float-left mg-l-2 pd-t-2 tx-10">NIK</span>
                                        <div class="popover-filter wrapper-filter-and-search wd-10 text-right pd-t-3 float-right mg-r-5" id="search-NIK" tabindex="0">
                                            <i class="ion-search pointer tx-12 { searchComponents.search.NIK.inUse ? 'text-warning' : '' }"></i>
                                        </div>
                                    </th>
                                    <th style="padding-left: 1px; padding-right: 1px; min-width:150px;">
                                        <div class="wrapper float-left pd-l-2 pointer" onclick="{() => doSort('onBoardingSessionId')}">
                                            <div class="top wd-10 { (searchComponents.sort_key.value === 'onBoardingSessionId' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-up-b tx-8"></i>
                                            </div>
                                            <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'onBoardingSessionId' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-down-b tx-8"></i>
                                            </div>
                                        </div>
                                        <span class="float-left mg-l-2 pd-t-2 tx-10">Session ID</span>
                                        <div class="popover-filter wrapper-filter-and-search wd-10 text-right pd-t-3 float-right mg-r-5" id="search-Onboarding_Session_ID" tabindex="0">
                                            <i class="ion-search pointer tx-12 { searchComponents.search.Onboarding_Session_ID.inUse ? 'text-warning' : '' }"></i>
                                        </div>
                                    </th>
                                    <th style="padding-left: 1px; padding-right: 1px; min-width:150px;">
                                        <div class="wrapper float-left pd-l-2 pointer" onclick="{() => doSort('verihubsMediaId')}">
                                            <div class="top wd-10 { (searchComponents.sort_key.value === 'verihubsMediaId' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-up-b tx-8"></i>
                                            </div>
                                            <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'verihubsMediaId' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-down-b tx-8"></i>
                                            </div>
                                        </div>
                                        <span class="float-left mg-l-2 pd-t-2 tx-10">Verihubs Media ID</span>
                                        <div class="popover-filter wrapper-filter-and-search wd-10 text-right pd-t-3 float-right mg-r-5" id="search-Verihubs_Media_ID" tabindex="0">
                                            <i class="ion-search pointer tx-12 { searchComponents.search.Verihubs_Media_ID.inUse ? 'text-warning' : '' }"></i>
                                        </div>
                                    </th>
                                    <th style="padding-left: 1px; padding-right: 1px; min-width:130px;">
                                        <div class="wrapper float-left pd-l-2 pointer" onclick="{() => doSort('videoCallDate')}">
                                            <div class="top wd-10 { (searchComponents.sort_key.value === 'videoCallDate' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-up-b tx-8"></i>
                                            </div>
                                            <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'videoCallDate' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-down-b tx-8"></i>
                                            </div>
                                        </div>
                                        <span class="float-left mg-l-2 pd-t-2 tx-10">VCall Date</span>
                                    </th>
                                    <th style="padding-left: 1px; padding-right: 1px; min-width:150px;">
                                        <div class="wrapper float-left pd-l-2 pointer" onclick="{() => doSort('videoCallInteractionId')}">
                                            <div class="top wd-10 { (searchComponents.sort_key.value === 'videoCallInteractionId' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-up-b tx-8"></i>
                                            </div>
                                            <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'videoCallInteractionId' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-down-b tx-8"></i>
                                            </div>
                                        </div>
                                        <span class="float-left mg-l-2 pd-t-2 tx-10">VC Interaction ID</span>
                                        <div class="popover-filter wrapper-filter-and-search wd-10 text-right pd-t-3 float-right mg-r-5" id="search-Video_Call_Interaction_ID" tabindex="0">
                                            <i class="ion-search pointer tx-12 { searchComponents.search.Video_Call_Interaction_ID.inUse ? 'text-warning' : '' }"></i>
                                        </div>
                                    </th>
                                    <th style="padding-left: 1px; padding-right: 1px; min-width:150px;">
                                        <div class="wrapper float-left pd-l-2 pointer" onclick="{() => doSort('onBoardingStage')}">
                                            <div class="top wd-10 { (searchComponents.sort_key.value === 'onBoardingStage' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-up-b tx-8"></i>
                                            </div>
                                            <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'onBoardingStage' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-down-b tx-8"></i>
                                            </div>
                                        </div>
                                        <span class="float-left mg-l-2 pd-t-2 tx-10">Onboarding Stage</span>
                                        <div class="popover-filter wrapper-filter-and-search wd-10 text-right pd-t-3 float-right mg-r-5" id="filter_Onboarding_Stage" tabindex="0">
                                            <i class="ion-funnel pointer tx-12 { searchComponents.filter.Onboarding_Stage.inUse ? 'text-warning' : '' }"></i>
                                        </div>
                                    </th>
                                    <th style="padding-left: 1px; padding-right: 1px; min-width:120px;">
                                        <div class="wrapper float-left pd-l-2 pointer" onclick="{() => doSort('fraudReview')}">
                                            <div class="top wd-10 { (searchComponents.sort_key.value === 'fraudReview' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-up-b tx-8"></i>
                                            </div>
                                            <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'fraudReview' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-down-b tx-8"></i>
                                            </div>
                                        </div>
                                        <span class="float-left mg-l-2 pd-t-2 tx-10">Fraud Review</span>
                                        <div class="popover-filter wrapper-filter-and-search wd-10 text-right pd-t-3 float-right mg-r-5" id="filter_Fraud_Review" tabindex="0">
                                            <i class="ion-funnel pointer tx-12 { searchComponents.filter.Fraud_Review.inUse ? 'text-warning' : '' }"></i>
                                        </div>
                                    </th>
                                    <th style="padding-left: 1px; padding-right: 1px; min-width:150px;">
                                        <div class="wrapper float-left pd-l-2 pointer" onclick="{() => doSort('videoCallReview')}">
                                            <div class="top wd-10 { (searchComponents.sort_key.value === 'videoCallReview' && searchComponents.sort_value.value === 'asc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-up-b tx-8"></i>
                                            </div>
                                            <div class="bottom wd-10 float-bottom { (searchComponents.sort_key.value === 'videoCallReview' && searchComponents.sort_value.value === 'desc') ? 'text-warning' : '' }">
                                                <i class="ion-arrow-down-b tx-8"></i>
                                            </div>
                                        </div>
                                        <span class="float-left mg-l-2 pd-t-2 tx-10">VC Review</span>
                                        <div class="popover-filter wrapper-filter-and-search wd-10 text-right pd-t-3 float-right mg-r-5" id="filter_Video_Call_Review" tabindex="0">
                                            <i class="ion-funnel pointer tx-12 { searchComponents.filter.Video_Call_Review.inUse ? 'text-warning' : '' }"></i>
                                        </div>
                                    </th>
                                    <th class="text-center" style="padding-left: 1px; padding-right: 1px; min-width:200px;">
                                        <span class="mg-l-2 pd-t-2 tx-10">Actions</span>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr if="{ !isLoading && tableComponents.anyData }" each="{list in listItems}">
                                    <td class="tx-10" style="padding-left: 5px; padding-right: 1px;">
                                        <div class="wrapper float-left">
                                            <input type="checkbox" id="checkall" checked="{tableComponents.selectedRows[list.id]}" onclick="{() => toggleChecklist(list.id)}" id="check-{list.id}">
                                        </div>
                                        <span class="mg-l-5 float-left tx-10">{ list.n }</span>
                                    </td>
                                    <td class="tx-10">
                                        { list.onBoardingLastModified }
                                    </td>
                                    <td class="tx-10">
                                        <span class="float-left wd-70 overflow-hidden" style="max-height: 10px;" id="CM_ID-{list.cmId}">{ list.cmId }</span>
                                        <!-- <span if="{list.cmId && list.cmId !== '-' && list.cmId.length > 0}" class="float-left wd-30 overflow-hidden">...</span> -->
                                        <button if="{list.cmId && list.cmId !== '-' && list.cmId.length > 0}" class="btn btn-primary float-right pd-r-5 pd-l-5 pd-t-2 pd-b-2 btn-copy" onclick="{() => copy(list.cmId)}" data-toggle="popover" data-trigger="focus" data-content="Copied">
                                            <i class="ion-ios-browsers-outline"></i>
                                        </button>
                                    </td>
                                    <td class="tx-10">
                                        <span class="float-left" id="NIK-{list.nik}">{ list.nik }</span>
                                        <button if="{list.nik && list.nik !== '-' && list.nik.length > 0}" class="btn btn-primary float-right pd-r-5 pd-l-5 pd-t-2 pd-b-2 btn-copy" onclick="{() => copy(list.nik)}" data-toggle="popover" data-trigger="focus" data-content="Copied">
                                            <i class="ion-ios-browsers-outline"></i>
                                        </button>
                                    </td>
                                    <td class="tx-10">
                                        <span class="float-left wd-70 overflow-hidden" style="max-height: 10px;" id="nik-{list.onBoardingSessionId}">{ list.onBoardingSessionId }</span>
                                        <span if="{list.onBoardingSessionId && list.onBoardingSessionId !== '-' && list.onBoardingSessionId.length > 0}" class="float-left wd-30 overflow-hidden">...</span>
                                        <button if="{list.onBoardingSessionId && list.onBoardingSessionId !== '-' && list.onBoardingSessionId.length > 0}" class="btn btn-primary float-right pd-r-5 pd-l-5 pd-t-2 pd-b-2 btn-copy" onclick="{() => copy(list.onBoardingSessionId)}" data-toggle="popover" data-trigger="focus" data-content="Copied">
                                            <i class="ion-ios-browsers-outline"></i>
                                        </button>
                                    </td>
                                    <td class="tx-10">
                                        <span class="float-left wd-70 overflow-hidden" style="max-height: 10px;" id="nik-{list.verihubsMediaId}">{ list.verihubsMediaId }</span>
                                        <!-- <span if="{list.verihubsMediaId && list.verihubsMediaId !== '-' && list.verihubsMediaId.length > 0}" class="float-left wd-30 overflow-hidden">...</span> -->
                                        <button if="{list.verihubsMediaId && list.verihubsMediaId !== '-' && list.verihubsMediaId.length > 0}" class="btn btn-primary float-right pd-r-5 pd-l-5 pd-t-2 pd-b-2 btn-copy" onclick="{() => copy(list.verihubsMediaId)}" data-toggle="popover" data-trigger="focus" data-content="Copied">
                                            <i class="ion-ios-browsers-outline"></i>
                                        </button>
                                    </td>
                                    <td class="tx-10">{ list.videoCallDate }</td>
                                    <td class="tx-10">
                                        <span class="float-left wd-70 overflow-hidden" style="max-height: 10px;" id="nik-{list.videoCallInteractionId}">{ list.videoCallInteractionId }</span>
                                        <span if="{list.videoCallInteractionId && list.videoCallInteractionId !== '-' && list.videoCallInteractionId.length > 0}" class="float-left wd-30 overflow-hidden">...</span>
                                        <button if="{list.videoCallInteractionId && list.videoCallInteractionId !== '-' && list.videoCallInteractionId.length > 0}" class="btn btn-primary float-right pd-r-5 pd-l-5 pd-t-2 pd-b-2 btn-copy" onclick="{() => copy(list.videoCallInteractionId)}" data-toggle="popover" data-trigger="focus" data-content="Copied">
                                            <i class="ion-ios-browsers-outline"></i>
                                        </button>
                                    </td>
                                    <td class="tx-10">{ list.onBoardingStage }</td>
                                    <td class="tx-10">{ list.fraudReview }</td>
                                    <td class="tx-10">{ list.videoCallReview }</td>
                                    <td style="padding-top: 2px;">
                                        <div class="form-inline">
                                            <button if="{isHasAccess('ekyc.com_mob.onboarding.fraud-review')}" class="btn btn-warning tx-10 pd-5 mg-l-1 mg-r-1" onclick="{() => fraudReview(list.onBoardingSessionId)}">Fraud Review</button>
                                            <button if="{isHasAccess('ekyc.com_mob.onboarding.vc-review')}" class="btn btn-success tx-10 pd-5 mg-l-1 mg-r-1" onclick="{() => vcReview(list.onBoardingSessionId)}">VC Review</button>
                                            <button if="{isHasAccess('ekyc.com_mob.onboarding.detail')}" class="btn btn-primary tx-10 pd-5 mg-l-1 mg-r-1" onclick="{() => detail(list.onBoardingSessionId)}">Detail</button>
                                        </div>
                                    </td>
                                </tr>
                                <tr if="{ isLoading }">
                                    <td colspan="9" class="tx-11 text-center">Loading...</td>
                                </tr>
                            </tbody>
                            <tfoot>
                                <tr if="{ !isLoading && !tableComponents.anyData }">
                                    <td colspan="9" class="text-center tx-12">No Data Found</td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                    <div class="col-12">
                        <div class="align-items-center justify-content-center float-right mg-t-20">
                            <ul class="pagination pagination-basic pagination-rounded mg-b-0">
                                <li class="page-item">
                                    <form-limit-per-page callback="{changeLimit}" custom-class="tx-11"></form-limit-per-page>
                                </li>
                                <li class="page-item {!pagination.hasPrev ? 'disabled' : ''}  hidden-xs-down">
                                    <a class="page-link pointer" onclick="{doPrev}" aria-label="Prev Page">
                                        <i class="icon ion-ios-arrow-back"></i>
                                    </a>
                                </li>
                                <li class="page-item active">
                                    <div class="page-link tx-12" aria-label="current">
                                    { pagination.current }
                                    </div>
                                </li>
                                <li class="page-item {!pagination.hasNext? 'disabled' : ''}">
                                    <a class="page-link pointer" onclick="{doNext}" aria-label="Next Page">
                                        <i class="icon ion-ios-arrow-forward"></i>
                                    </a>
                                </li>
                                <li class="page-item">
                                    <select id="jump-to-page float-right" class="form-control tx-12" onchange="{goToPage}">
                                        <option value="{jp.n}" selected="{jp.selected}" each="{jp in dataInformation.availablePages}">{jp.n}</option>
                                    </select>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="row mg-t-20">
                    <div class="col-sm-6">
                        <label>Download</label><br>
                        <div class="form-inline">
                            <select class="form-control float-left tx-11" id="download-type">
                                <option value="">Download Type</option>
                                <option value="onbo-selected-list">Onboarding Customer - List (csv)</option>
                                <option value="fraud-escalation">Fraud Escalation (xlsx)</option>
                                <option value="vc-review">Video Call Review (xlsx)</option>
                                <option value="onboarding-detail">Onboarding Customer - Detail (xlsx)</option>
                            </select>
                            <button disabled="{download.is_loading_download_selected || isLoading || buttons.downloadSelected.disabled ? 'true' : ''}" class="btn btn-primary tx-11 float-left mg-r-5 mg-l-5" onclick="{downloadSelected}">
                                <span if="{!download.is_loading_download_selected}">Download Selected</span>
                                <span if="{download.is_loading_download_selected}" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span if="{download.is_loading_download_selected}">Downloading...</span>
                            </button>
                            <button disabled="{download.is_loading_download_all || isLoading || !tableComponents.anyData ? 'true' : ''}" class="btn btn-primary tx-11 float-left" onclick="{downloadAll}">
                                <span if="{!download.is_loading_download_all}">Download All</span>
                                <span if="{download.is_loading_download_all}" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span if="{download.is_loading_download_all}">Downloading...</span>
                            </button>
                        </div>
                    </div>
                    <div class="col-sm-6">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <style>
        th, td {
            background-color: aqua !important;
            letter-spacing: 0px;
            font-size: 11px;
            padding: 5px;
        }
        tr:last-child {
            border-bottom: 1px solid #C0C0C0;
        }
        .table-wrapper {
            width: 100%;
        }
        .wrapper, .wrapper-filter-and-search {
            cursor: pointer;
        }
        .wrapper:hover, .wrapper-filter-and-search:hover {
            color: #C0C0C0;
        }
    </style>
    
    <script>
        import { cancelAllRequest } from 'services/SDK/main'
        import {
            ComMoOnBoardingList,
            ComMoOnBoardingSync,
            ComMoOnBoardingFilters,
            ComMoOnBoardingDownload,
        } from 'appModule/ekyc/ekyc.sdk'
        import { createAgentActivity } from 'appModule/agents/agent-activity.sdk'
        import { result } from 'lodash'
        import downloadFile from 'js-file-download'
        import { DateTimeRangePicker } from 'helpers/datepicker'
        import { getCookie } from 'helpers/cookie'
        import { changeStorage, getStorage } from 'helpers/storage'
        import { sendToClipboard } from 'helpers/utilities'
        import { goTo } from 'helpers/ma'
		import { hasAccess } from 'helpers/permission'
        import { showAlertError } from 'helpers/utilities'
        const itemSearchIds = [
            'CM_ID',
            'NIK',
            'Onboarding_Session_ID',
            'Verihubs_Media_ID',
            'Video_Call_Interaction_ID'
        ]
        const itemFilters = [
            'filter_Onboarding_Stage',
            'filter_Fraud_Review',
            'filter_Video_Call_Review',
        ]
        window.controllers = []
        export default {
            sync: {
                last_sync: 'yyyy/mm/dd hh:mm:ss',
                is_syncronizing: false
            },
            isLoading: false,
            pagination: {},
            download: {
                is_loading_download_all: false,
                is_loading_download_selected: false,
                enabled: false,
                threshold: 0
            },
            buttons: {},
            listItems: [
                //  {
                //     n: 199,
                //     onBoardingLastModified: 'onBoardingLastModified',
                //     cmId: 'cmId',
                //     nik: 'nik',
                //     onBoardingSessionId: 'onBoardingSessionId',
                //     verihubsMediaId: 'verihubsMediaId',
                //     videoCallDate: 'videoCallDate',
                //     videoCallInteractionId: 'videoCallInteractionId',
                //     onBoardingStage: 'onBoardingStage',
                //     fraudReview: 'fraudReview',
                //     videoCallReview: 'videoCallReview',
                // }
            ],
            dataInformation: {},
            searchComponents: {},
            tableComponents: {},
            onBeforeMount() {
                window.controllers = []
                window.onboDoFilter = this.doFilter
                window.onboSearchReset = this.searchReset
                window.onboFilterReset = this.filterReset
                window.onboSearch = this.search
                window.onboSetDefaultSearchValue = this.setDefaultSearchValue
                const savedLastSync = getStorage('LAST_SYNC', 'ONBOARDING')
                this.sync.progess_percentage = 0
                this.sync.last_sync = savedLastSync
                this.buttons = {
                    downloadSelected: {disabled: true}
                }
                this.pagination = {hasData: true, current: 1, hasNext: false, hasPrev: false}
                this.dataInformation = {
                    startNumber: 1,
                    endNumber: 1,
                    currentCount: 0,
                    totalDocuments: 0,
                    totalList: 0,
                    totalSelected: 0,
                    estimatedPages: 1,
                    availablePages: [{n: 1}]
                }
                this.searchComponents = {
                    allTime: false,
                    page: { value: 1 },
                    limit: { value: 10 },
                    search_all: { inUse: false, value: '', loading: false },
                    fromDate: { inUse: false, value: moment().toDate() },
                    endDate: { inUse: false, value: moment().set({h: 23, m: 59, s: 59}).toDate() },
                    sort_key: { value: 'onBoardingLastModified' },
                    sort_value: { value: 'desc' },
                    search: {
                        CM_ID: { inUse: false, value: '' },
                        NIK: { inUse: false, value: '' },
                        Onboarding_Session_ID: { inUse: false, value: '' },
                        Verihubs_Media_ID: { inUse: false, value: '' },
                        Video_Call_Interaction_ID: { inUse: false, value: '' },
                    },
                    filter: {
                        Onboarding_Stage: { inUse: false, value: '', items: [], selected: [] },
                        Fraud_Review: { inUse: false, value: '', items: [], selected: [] },
                        Video_Call_Review: { inUse: false, value: '', items: [], selected: [] },
                    }
                }
                this.tableComponents = {
                    anyData: false,
                    checkall: {
                        isChecked: false
                    },
                    selectedRows: {}
                }
            },
            onBeforeUnmount() {
                $('.popover-filter').popover('hide')
                cancelAllRequest()
                this.searchComponents.search_all.loading = false
                this.sync.is_syncronizing = false
                this.isLoading = false
                this.download.is_loading_download_all = false
                this.download.is_loading_download_selected = false
                this.update()
            },
            onBeforeUpdate() {
                $('.btn-copy').popover()
            },
            onMounted() {
                console.log('mounting onboarding list')
                const savedFilter = getStorage('SEARCH_QUERIES', 'ON-BOARDING', '{}')
                if (savedFilter !== '{}') {
                    this.searchComponents = JSON.parse(savedFilter)
                    this.update()
                }
                DateTimeRangePicker('#date1', {opens: 'right'}, this.setDateTimeValue)
                this.doSync().then(console.info)
                // this.getList()
                this.initColumsSearch()
                this.logAgentActivity('Open Onboarding List', '')
            },
            logAgentActivity(action, detail) {
                createAgentActivity({
                    module: 'CommBank Mobile - OnBoarding',
                    action,
                    detail
                })
            },
            isHasAccess(access) {
                return hasAccess(access)
            },
            initColumsFilter(name, itemSelector, listItems=[]) {
                const checkedItems = this.searchComponents.filter[name].selected || []
                let template = '<ul class="list-group" style="max-height: 200px;">'
                template += '       <li class="list-group-item pd-0 bd-0">'
                template += '           <ul class="list-group bd-0" style="max-height: 150px; overflow: auto;">'
                for (const itemValue of listItems) {
                    const checked = (checkedItems.indexOf(itemValue) > -1)
                                        template += `<li class="list-group-item pd-5">
                                                        <input class="float-left input-filter-${name}" value="${itemValue}" checked="${checked}" style="padding: 10px;" type="checkbox">
                                                        <span class="float-left pd-t-0 pd-l-10 tx-10">${itemValue}<span>
                                                    </li>`
                }
                template += '           </ul>'
                template += '       </li>'
                template += `       <li class="list-group-item pd-t-5 bd-0">
                                        <button class="btn btn-primary wd-50 float-left tx-10 pd-5 mg-3" onclick="window.onboDoFilter('${name}')">Filter</button>
                                        <button class="btn btn-warning wd-50 float-left tx-10 pd-5 mg-3" onclick="window.onboFilterReset('${name}')">Reset</button>
                                    </li>`
                template += `</ul>`
                $(`#${itemSelector}`).popover({
                    container: 'body',
                    content: template,
                    html: true,
                    placement: 'bottom'
                })
            },
            initColumsSearch() {
                for (const name of itemSearchIds) {
                    const inputId = `input-search-${name}`
                    const id = `#search-${name}`
                    $(id).popover({
                        container: 'body',
                        content: `<input type="text" class="form-control pd-5 tx-10 float-left h-auto" placeholder="search" id="${inputId}">
                            <br>
                            <button class="btn btn-primary wd-50 float-left tx-10 pd-5 mg-3" onclick="window.onboSearch('${name}')">Search</button>
                            <button class="btn btn-warning wd-50 float-left tx-10 pd-5 mg-3" onclick="window.onboSearchReset('${name}')">Reset</button>
                        `,
                        html: true,
                        placement: 'bottom'
                    })
                    $(id).on('show.bs.popover', window.onboSetDefaultSearchValue(name, inputId))
                }
            },
            toggleAllDate() {
                const isCheck = $('#all-time').is(":checked")
                if (isCheck) {
                    this.searchComponents.fromDate.value = ''
                    this.searchComponents.endDate.value = ''
                    this.searchComponents.allTime = true
                    this.update()
                    this.getList()
                }
            },
            setDateTimeValue (start, end) {
                if (start) this.searchComponents.fromDate.value = start.toDate()
                if (end) this.searchComponents.endDate.value = end.toDate()
                this.searchComponents.allTime = false
                this.update()
                this.getList()
            },
            loading(val=true) {
                this.isLoading = val
                this.update()
            },
            setDefaultSearchValue(name, id) {
                return () => {
                    const defaultValue = this.searchComponents.search[name].value
                    setTimeout(() => { // harus menggunakan setTimeout, krn tidak bisa berubah hasil nya kalau gak di timeout dlu. entahlah
                        $(`#${id}`).val(defaultValue)
                    }, 1)
                }
            },
            /* SYNC */
            sync() {
                this.doSync().then(console.info)
            },
            async doSync() {
                try {
                    this.sync.progess_percentage = 0
                    this.sync.is_syncronizing = true
                    this.update()
                    const queries = this.getQuery()
                    const {data} = await ComMoOnBoardingSync(queries)
                    if (data.last_sync) {
                        this.sync.last_sync = data.last_sync.syncDate
                        const totalPages = data.last_sync.totalPage
                        const totalDivide = 100 / totalPages
                        this.sync.progess_percentage = Math.ceil(totalDivide)
                        this.update()
                        if (totalPages > 1) {
                            for (let page = 2; page <= totalPages; page++) {
                                queries.page = page
                                await ComMoOnBoardingSync(queries) // synchronizing next page
                                const totalPercentage = Math.ceil(totalDivide) + this.sync.progess_percentage
                                this.sync.progess_percentage = (totalPercentage > 100) ? 100 : totalPercentage
                                this.update()
                            }
                        }
                        this.sync.is_syncronizing = false
                        changeStorage({'LAST_SYNC': data.last_sync.syncDate}, 'ONBOARDING')
                        this.update()
                        this.getList()
                    }
                    return 'Last Sync:' + data.last_sync
                } catch (err) {
                    const isError = err instanceof Error
                    if (isError) showAlertError(err)
                    this.sync.is_syncronizing = false
                    this.sync.last_sync = 'Error'
                    this.update()
                }
            },
            doFilter(name) {
                const selected = []
                const sel = $(`.input-filter-${name}`).each(function () {
                    const isChecked = $(this).is(':checked')
                    if(isChecked) {
                        selected.push($(this).val())
                    }
                })

                this.searchComponents.filter[name].selected = selected
                this.searchComponents.filter[name].inUse = (selected.length > 0)
                this.searchComponents.filter[name].value = selected.join(',')
                this.getList()
            },
            searchReset(name) {
                if (!name) return false
                const id = `#input-search-${name}`
                $(id).val('')
                $(`#search-${name}`).popover('hide')
                this.searchComponents.search[name]['inUse'] = false
                this.searchComponents.search[name]['value'] = ''
                this.getList()
            },
            filterReset(name) {
                if (!name) return false
                const id = `#input-filter-${name}`
                $(id).val('')
                $(`#filter-${name}`).popover('hide')
                this.searchComponents.filter[name]['inUse'] = false
                this.searchComponents.filter[name]['value'] = ''
                this.getList()
            },
            search(name) {
                if (!name) return false
                const id = `#input-search-${name}`
                const value = $(id).val()
                const isInUse = value && value.length > 0
                this.searchComponents.search[name]['inUse'] = isInUse
                this.searchComponents.search[name]['value'] = value
                this.getList()
            },
            searchByQuery(e) {
                this.getList(e) // hanya untuk indikator bahwa function tsb dipanggil pada component langsung
            },
            async doSearch() {
                try {
                    this.searchComponents.search_all.loading = true
                    this.loading(true)
                    this.listItems = []
                    const queries = this.getQuery()
                    const onboardingListResponse = await ComMoOnBoardingList(queries)
                    const data = result(onboardingListResponse, 'data')
                    const items = result(data, 'items', [])
                    const startNumber = result(data, 'startNumber', [])
                    const endNumber = result(data, 'endNumber', [])
                    this.dataInformation.totalList = items.length || 1
                    this.dataInformation.totalDocuments = result(data, 'totalDocs', this.dataInformation.totalList)
                    this.dataInformation.startNumber = startNumber
                    this.dataInformation.endNumber = endNumber-1
                    this.tableComponents.anyData = items.length > 0
                    if (items.length > 0) {
                        this.download.is_loading_download_all = false
                        let n = 0
                        for (const item of items) {
                            const id = item.id
                            item.n = result(this.dataInformation, 'startNumber', 0) + n
                            this.tableComponents.selectedRows[id] = false // update check
                            this.listItems.push(item)
                            n += 1
                        }
                        const lastSync = result(this.listItems, '[0][lastSync]', '')
                        // this.sync.last_sync = moment(lastSync).format('YYYY/MMM/DD HH:mm:ss')
                    } else {
                        this.download.is_loading_download_all = false
                    }
                    this.loading(false)
                    const res = await ComMoOnBoardingFilters(queries)
                    const { data: dataFilters } = res
                    const { times } = dataFilters.item
                    if (times && times.since && this.searchComponents.allTime) {
                        this.searchComponents.fromDate.value = times.since
                        this.searchComponents.endDate.value = times.until
                    }
                    this.setFilters(dataFilters.item)
                    this.dataInformation.availablePages = []
                    const currentPage = result(dataFilters, 'page', 1)
                    const estimatedPages = result(dataFilters, 'estimatedPages', 1)
                    for (let n = 1; n <= estimatedPages; n++) {
                        let itm = {n}
                        if (currentPage === n) itm.selected = true
                        this.dataInformation.availablePages.push(itm)
                    }
                    this.pagination.current = currentPage
                    this.dataInformation.estimatedPages = estimatedPages
                    this.checkPaginationButtons()
                    this.update()
                } catch (err) {
                    const isError = err instanceof Error
                    if (isError) showAlertError(err)
                    this.searchComponents.search_all.loading = false
                    this.update()
                }
                this.loading(false)
            },
            setFilters ({onBoardingStage, fraudReview, videoCallReview}) {
                if (onBoardingStage) {
                    this.searchComponents.filter.Onboarding_Stage.items = onBoardingStage
                    this.initColumsFilter('Onboarding_Stage', 'filter_Onboarding_Stage', onBoardingStage)
                }
                if (fraudReview) {
                    this.searchComponents.filter.Fraud_Review.items = fraudReview
                    this.initColumsFilter('Fraud_Review', 'filter_Fraud_Review', fraudReview)
                }
                if (videoCallReview) {
                    this.searchComponents.filter.Video_Call_Review.items = videoCallReview
                    this.initColumsFilter('Video_Call_Review', 'filter_Video_Call_Review', videoCallReview)
                }
                this.update()
            },
            getQuery() {
                let queries = {}
                const sc = this.searchComponents
                for (const x in sc) {
                    if (['search', 'filter'].indexOf(x) > -1) {
                        for (const s in sc[x]) {
                            const key = `${x}_${s}`
                            queries[key] = result(sc[x], `${s}.value`)
                        }
                        continue
                    }
                    if (sc.allTime) { // jika all time checked, maka from/end date tidak di inputkan
                        if (['fromDate', 'endDate'].indexOf(x) === -1) queries[x] = result(sc, `${x}.value`)
                    } else {
                        if (['fromDate', 'endDate'].indexOf(x) > -1) {
                            queries[x] = moment(result(sc, `${x}.value`)).format('YYYY-MM-DD HH:mm:ss')
                        } else {
                            queries[x] = result(sc, `${x}.value`)
                        }
                    }
                }
                changeStorage({'SEARCH_QUERIES': JSON.stringify(this.searchComponents)}, 'ON-BOARDING')
                return queries
            },
            changeLimit(newLimit) {
                this.searchComponents.limit.value = newLimit
                this.searchComponents.page.value = 1
                this.getList()
            },
            getList(e) {
                if (e) this.searchComponents.page.value = 1
                const s = this.$('#search')
                if (s) this.searchComponents.search_all.value = s.value
                this.doSearch()
                    .catch((err) => {
                        showAlertError(err)
                        return null
                    })
                    .then(() => {
                        this.searchComponents.search_all.loading = false
                        this.update()
                    })
            },
            detail(id='') {
                if (id.length === 0) {
                    showAlertError(new Error('Invalid onboardingSessionId'))
                    return false
                }
                changeStorage({'SESSION_ID': id}, 'ON-BOARDING')
                goTo('com_mob/on-boarding-detail')
            },
            fraudReview(id='') {
                if (id.length === 0) {
                    showAlertError(new Error('Invalid onboardingSessionId'))
                    return false
                }
                changeStorage({'SESSION_ID': id}, 'ON-BOARDING')
                goTo('com_mob/onbo-fraud-review')
            },
            vcReview(id='') {
                if (id.length === 0) {
                    showAlertError(new Error('Invalid onboardingSessionId'))
                    return false
                }
                changeStorage({'SESSION_ID': id}, 'ON-BOARDING')
                goTo('com_mob/onbo-vc-review')
            },
            copy(text) {
                sendToClipboard(text)
            },
            /* SORTING */
            doSort(type) {
                this.searchComponents.sort_key.value = type
                if (this.searchComponents.sort_value.value === 'desc') this.searchComponents.sort_value.value = 'asc'
                else if (this.searchComponents.sort_value.value === 'asc') this.searchComponents.sort_value.value = 'desc'
                this.getList()
            },
            // DOWNLOADS
            downloadAll () {
                this.download.is_loading_download_all = true
                this.download.enabled = true
                this.update()
                const downloadedBy = getCookie('name')
                setTimeout(() => {
                    ComMoOnBoardingDownload({filename: true}) // getting filename
                        .catch((err) => {
                            showAlertError(err)
                            return null // akan dilanjutkan ke .then()
                        })
                        .then((res) => {
                            if (res && res.filename) {
                                const filename = res.filename
                                const queries = this.getQuery()
                                ComMoOnBoardingDownload(queries)
                                    .catch((err) => {
                                        showAlertError(err)
                                        return null
                                    })
                                    .then((res) => {
                                        window.controllers.pop() // remove controller if request was successfull
                                        if (res) downloadFile(res, filename)
                                        this.download.enabled = false
                                        this.download.is_loading_download_all = false
                                        this.update()
                                        
                                        let currentQueries = []
                                        for (const q in queries) {
                                            if (queries[q]) currentQueries.push(q + '=' + queries[q])
                                        }
                                        this.logAgentActivity('Download File: ' + filename, 'List Screen Download_All, Filter: ' + currentQueries.join(', '))
                                    })
                            } else {
                                this.download.enabled = false
                                this.download.is_loading_download_all = false
                                this.update()
                            }
                        })
                }, 1)
            },
            downloadSelected (e) {
                this.download.is_loading_download_selected = true
                this.download.enabled = true
                this.update()
                const downloadedBy = getCookie('name')
                const ids = Object.keys(this.tableComponents.selectedRows)
                    .map(id => {
                        return this.tableComponents.selectedRows[id] === true ? parseInt(id) : 0
                    })
                    .filter(x => x > 0)
                    .join()
                const downloadType = this.$('#download-type').value
                // if (downloadType === 'vc-review') {
                //     this.download.is_loading_download_selected = false
                //     this.update()
                //     showAlertError(new Error('Download Video Call Still in-Development or patching'))
                //     return false
                // }
                if (downloadType.length === 0) {
                    this.download.is_loading_download_selected = false
                    this.update()
                    showAlertError(new Error('Please Choose Download Type'))
                    return false
                }
                setTimeout(() => {
                    ComMoOnBoardingDownload({ids, filename: true, downloadType}) // getting filename
                        .catch((err) => {
                            showAlertError(err)
                            return null
                        })
                        .then((res0) => {
                            if (!res0) {
                                this.download.enabled = false
                                this.download.is_loading_download_selected = false
                                this.update()
                            } else {
                                const filename = res0.filename
                                const queries = {
                                    ids,
                                    sort_key: this.searchComponents.sort_key.value,
                                    sort_value: this.searchComponents.sort_value.value,
                                    downloadType
                                }
                                ComMoOnBoardingDownload(queries)
                                    .catch((err) => {
                                        showAlertError(err)
                                        return null
                                    })
                                    .then((res) => {
                                        if (res) downloadFile(res, filename)
                                        else debugger
                                        this.download.enabled = false
                                        this.download.is_loading_download_selected = false
                                        this.update()
                                        
                                        let currentQueries = []
                                        for (const q in queries) {
                                            if (queries[q]) currentQueries.push(q + '=' + queries[q])
                                        }
                                        this.logAgentActivity('Download File: ' + filename, 'List Screen Download_Selected, Filter: ' + currentQueries.join(', '))
                                    })
                            }
                        })
                },  1)
            },
            doPrev() {
                let pageValue = result(this.searchComponents, 'page.value', 0)
                const estimatedPages = result(this.dataInformation, 'estimatedPages', 0)
                if (pageValue > 1 && pageValue <= estimatedPages) {
                    pageValue -= 1
                    this.searchComponents.page.value = pageValue
                    this.pagination.current = pageValue
                    this.checkPaginationButtons()
                    this.getList()
                }
            },
            doNext() {
                let pageValue = result(this.searchComponents, 'page.value', 0)
                const estimatedPages = result(this.dataInformation, 'estimatedPages', 0)
                if (pageValue < estimatedPages) {
                    pageValue += 1
                    this.searchComponents.page.value = pageValue
                    this.pagination.current = pageValue
                    this.checkPaginationButtons()
                    this.getList()
                }
            },
            checkPaginationButtons() {
                const {estimatedPages} = this.dataInformation
                const {current: page} = this.pagination
                let hasNext=false, hasPrev=false
                if (estimatedPages > 1) {
                    if (page < estimatedPages) hasNext = true
                    if (page > 1 && estimatedPages > 1) hasPrev = true
                }
                this.pagination.hasNext = hasNext
                this.pagination.hasPrev = hasPrev
                this.update()
            },
            goToPage(e) {
                const value = parseInt(e.target.value)
                if (value) {
                    this.searchComponents.page.value = value
                    this.pagination.current = value
                    this.getList()
                }
            },
            toggleChecklist(inquiryId) {
                if (!inquiryId) return false
                this.tableComponents.selectedRows[inquiryId] = !this.tableComponents.selectedRows[inquiryId]
                this.checkButtonSelected(inquiryId)
                this.update()
            },
            toggleCheckAll() {
                this.tableComponents.checkall.isChecked = !this.tableComponents.checkall.isChecked
                for (const inquiryId in this.tableComponents.selectedRows) {
                    this.tableComponents.selectedRows[inquiryId] = this.tableComponents.checkall.isChecked
                }
                const checked = Object.keys(this.tableComponents.selectedRows)
                    .filter(x => {
                        return this.tableComponents.selectedRows[x] === true
                    })
                if (checked.length > 0) this.buttons.downloadSelected.disabled = false
                else this.buttons.downloadSelected.disabled = true
                this.dataInformation.totalSelected = checked.length
                this.update()
            },
            checkButtonSelected(inquiryId) {
                if (inquiryId) {
                    const checked = Object.keys(this.tableComponents.selectedRows)
                        .filter(x => {
                            return this.tableComponents.selectedRows[x] === true
                        })
                    if (checked.length > 0) this.buttons.downloadSelected.disabled = false
                    else this.buttons.downloadSelected.disabled = true
                    this.tableComponents.checkall.isChecked = (checked.length === this.searchComponents.limit.value)
                    this.dataInformation.totalSelected = checked.length
                } else {
                    this.tableComponents.checkall.isChecked = false
                }
                this.update()
            }
        }
    </script>
</onbo-inquiry>