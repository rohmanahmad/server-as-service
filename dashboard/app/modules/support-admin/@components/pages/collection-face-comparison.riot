<collection-face-comparison>
    <div class="row pd-t-20">
        <div class="col-2">
            <div class="form-row">
                <div class="col">
                    <span class="tx-11">Limit</span><br/>
                    <form-limit-per-page custom-class="tx-11 pd-l-2" callback="{ (res) => updatePayload('limit', res) }"></form-limit-per-page>
                </div>
                <div class="col">
                    <span class="tx-11">Page</span><br/>
                    <form-go-to-page total-pages="{ totalPage || 1 }" custom-class="tx-11 pd-l-2" callback="{ (res) => updatePayload('page', res) }"></form-go-to-page>
                </div>
            </div>
        </div>
        <div class="col-4">
            <div class="form-row">
                <div class="col">
                    <span class="tx-11">Sort</span><br/>
                    <sort-data items="{ sortData }" el-class="form-control tx-11" callback="{ (res) => updatePayload('sort', res) }"></sort-data>
                </div>
            </div>
        </div>
        <div class="col-4">
            <div class="form-row">
                <div class="col">
                    <span class="tx-11">Transaction Time</span><br/>
                    <form-date-picker-range show-time="{ true }" date-type="range" el-class="tx-11" callback="{ (res) => updatePayload('transactionTime', res) }"></form-date-picker-range>
                </div>
            </div>
        </div>
        <div class="col-2 text-right pd-x-0">
            <button class="btn btn-danger tx-11 mg-t-20 mg-x-5" onclick="{ resetCollection }">Reset Collection</button>
        </div>
    </div>
    <div class="row pd-t-20">
        <div class="col-12 overflow-hidden">
            <table class="table table-bordered table-hover bd">
                <thead>
                    <tr>
                        <td class="tx-11 font-weight-bold wd-50">#</td>
                        <td class="tx-11 font-weight-bold wd-60">id</td>
                        <td class="tx-11 font-weight-bold wd-100">actionBy</td>
                        <td class="tx-11 font-weight-bold wd-100">channelName</td>
                        <td class="tx-11 font-weight-bold wd-100">nik</td>
                        <td class="tx-11 font-weight-bold wd-100">result</td>
                        <td class="tx-11 font-weight-bold wd-100">sessionId</td>
                        <td class="tx-11 font-weight-bold wd-100">similarity</td>
                        <td class="tx-11 font-weight-bold wd-100">threshold</td>
                        <td class="tx-11 font-weight-bold wd-100">transactionTime</td>
                        <td class="tx-11 font-weight-bold wd-100">sync_date</td>
                    </tr>
                </thead>
                <tbody>
                    <tr if="{!items || (items && items.length === 0)}">
                        <td colspan="11" class="text-center tx-11">No Data Found</td>
                    </tr>
                    <tr each="{item in items}">
                        <td class="tx-11">
                            <div class="form-inline">
                                <form-toggle-checklist data-key="{ item._id }" selected-all="{isSelectedAll}" callback="{ checkSelected }"></form-toggle-checklist>
                                <span class="pd-l-5">
                                    { item.n }
                                </span>
                            </div>
                        </td>
                        <td class="tx-11">{ item.id }</td>
                        <td class="tx-11">{ item.actionBy }</td>
                        <td class="tx-11">{ item.channelName }</td>
                        <td class="tx-11">{ item.nik }</td>
                        <td class="tx-11">{ item.result }</td>
                        <td class="tx-10">{ item.sessionId }</td>
                        <td class="tx-11">{ item.similarity }</td>
                        <td class="tx-11">{ item.threshold }</td>
                        <td class="tx-11">
                            { item.transactionTime }
                            <span class="badge badge-primary mg-t-2 text-left">UNIX_TIME: <br>{ item.transactionTimeNumber }</span><br>
                            <span class="badge badge-warning mg-t-2 text-left">ORIGINAL_API: <br>{ item.transactionTimeOriginal }</span>
                        </td>
                        <td class="tx-11">{ item.sync_date }</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-12">
            <table class="table table-bordered bd">
                <tr>
                    <td class="tx-11">
                        <div class="form-inline float-left pd-t-10 mg-r-20">
                            <form-toggle-checklist data-key="all" selected-all="{isSelectedAll}" callback="{ toggleCheckAll }"></form-toggle-checklist>
                            <span class="pd-l-5">
                                Check All
                            </span>
                        </div>
                        <button class="btn btn-warning btn-sm tx-11 mg-t-5 mg-x-5 float-left">Remove Selected</button>
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <style>
    </style>
    <script>
        import {
            cancelAllRequest,
        } from 'services/SDK/main'
        import {
            collectionRead,
            collectionWrite,
            collectionReset
        } from 'appModule/support-admin/support-admin.sdk'
        import { result } from 'lodash'
        import { showAlertError, showAlertSuccess, debugLog } from 'helpers/utilities'
        export default {
            collectionName: 'fc_inquiry',
            isSelectedAll: false,
            totalPages: 1,
            sortData: [
                {name: 'id', title: 'Id' },
                {name: 'actionBy', title: 'ActionBy' },
                {name: 'channelName', title: 'ChannelName' },
                {name: 'nik', title: 'Nik' },
                {name: 'result', title: 'Result' },
                {name: 'sessionId', title: 'SessionId' },
                {name: 'similarity', title: 'Similarity' },
                {name: 'sync_date', title: 'Sync_date' },
                {name: 'threshold', title: 'Threshold' },
                {name: 'transactionTime', title: 'TransactionTime' }
            ],
            payload: {
                limit: 10,
                page: 1,
                sort_key: 'id',
                sort_dir: 'desc'
            },
            onBeforeMount() {
            },
            onBeforeUnmount() {
                cancelAllRequest()
            },
            onMounted() {
                this.getItems()
            },
            onUnmounted() {},
            updatePayload(field, data) {
                switch(field) {
                    case 'sort':
                        this.payload.sort_key = data.key
                        this.payload.sort_dir = data.dir
                        break
                    case 'limit':
                        this.payload.limit = data
                        break
                    case 'page':
                        this.payload.page = data
                        break
                    case 'transactionTime':
                        this.payload.transactionTime = result(data, 'since', moment()).format('YYYY-MM-DD HH:mm') + ',' + result(data, 'until', moment()).format('YYYY-MM-DD HH:mm')
                        break
                }
                this.update()
                this.getItems()
            },
            getItems() {
                const payload = this.payload
                collectionRead(this.collectionName, payload)
                    .catch(err => {
                        showAlertError(err)
                        return null
                    })
                    .then(res => {
                        if (!res) return null
                        this.totalPages = result(res, 'data.total_pages')
                        const skip = result(res, 'data.skip', 0)
                        this.items = result(res, 'data.items', [])
                            .map((x, i) => {
                                x.n = (skip + 1) + parseInt(i)
                                return x
                            })
                        this.update()
                    })
            },
            toggleCheckAll(key, isCheckedAll) {
                this.isSelectedAll = isCheckedAll
                this.update()
            },
            checkSelected(key, isChecked) {
                if (this.isSelectedAll) {
                    if (!isChecked) this.isSelectedAll = false
                }
                this.update()
            },
            resetCollection() {
                const confirmation = confirm('Are You Sure??')
                if (!confirmation) return null
                collectionReset(this.collectionName)
                    .catch(err => {
                        setAlertError(err)
                        return null
                    })
                    .then(res => {
                        if (res) {
                            showAlertSuccess('Reset Successfully')
                        }
                        this.getItems()
                    })
            }
        }
    </script>
</collection-face-comparison>