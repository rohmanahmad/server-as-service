<role-edit>
    <div class="br-mainpanel">
        <div class="br-pageheader">
            <nav class="breadcrumb pd-0 mg-0 tx-12">
                <a class="breadcrumb-item" >Role</a>
                <span class="breadcrumb-item active">Edit</span>
            </nav>
        </div>

        <div class="br-pagebody pd-x-20 pd-sm-x-30 pd-b-20">
            <div class="br-section-wrapper pd-30 tx-11">
                <form name="role-edit">
                    <div class="row">
                        <div class="col-12 pd-0">
                            <div class="form-layout form-layout-4 bd-0 pd-0 mg-b-30">
                                <h5 class="br-section-label mg-b-40 mg-t-0">Role</h5>
                                <div class="row">
                                    <label class="col-sm-2 form-control-label fz-m">Name</label>
                                    <div class="col-sm-10 mg-t-10 mg-sm-t-0">
                                        <input type="text" class="form-control tx-11 fz-m" placeholder="Enter User Name" value="{this.title}" id="titlerole">
                                    </div>
                                </div>
                                <div class="row mg-t-20">
                                    <label class="col-sm-2 form-control-label fz-m">Description</label>
                                    <div class="col-sm-10 mg-t-10 mg-sm-t-0">
                                        <textarea rows="3" class="form-control tx-11" placeholder="Enter User Description" id="description" value="{this.descriptions}"></textarea>
                                        <!-- <input type="text" class="form-control tx-11 fz-m" placeholder="Enter User Description" value="role descriptions"> -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12 bd pd-0 bd-b-0">
                            <table class="table table-bordered table-hover mg-b-0">
                                <thead style="background-color: #edecec;">
                                    <tr>
                                        <th class="tx-left">Component Roles </th>
                                        <th class="tx-left wd-10-p">Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr each={val in this.items}>
                                        <td class="{val.isParent === false ? 'pd-l-30' : 'tx-trns tx-black tx-11-force'}">
                                            <b if="{val.isSubMenu}" class="tx-12">[Sub Menu]</b>
                                            {val.title}
                                        </td>
                                        <td class="tx-center">
                                            <label class="ckbox mg-l-5 c_p">
                                                <input type="checkbox" checked="{val.checked}" class="createCheck" name="browser[]" value="1" data-parsley-multiple="browser" id="{val.name}" onclick="{()=>checkedVal(val)}"><span></span>
                                            </label>
                                        </td>
                                    </tr>
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="">
                                            <!-- <button class="btn btn-outline-primary btn-xs pull-right">Create Role</button>                                        -->
                                        </td>
                                        <td>      
                                            <button class="btn btn-outline-primary btn-icon mg-r-10 pull-right" id="AddUser" onclick="{Updates}" if="{ isHasUpdateAccess }">
                                                <div class="mg-r-15 mg-l-15 curtom-width-height" style="width:max-content;" >Update</div>
                                            </button>
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12 pd-0 mg-t-20">
                            <a href="{setLink('role/list')}" class="br-menu-link btn btn-outline-primary btn-xs menuback btn-xs tx-11" id="task-pendings">
                                <i class="menu-item-icon icon ion-ios-undo-outline tx-24"></i>
                                <span class="menu-item-label">Back</span>
                            </a>
                            <!-- <button class="btn btn-outline-primary btn-xs" onclick="{Back}" id="searchCustomersviews"><i class="menu-item-icon ion-ios-undo-outline tx-24  mg-r-10"></i>Back</button> -->
                        </div>
                    </div>
                </form>
            </div> 
        </div>
    </div>

    <style>
        .curtom-width-height{
            width: 40px;
            height: 23px;
        }
        .c_p{
            cursor: pointer;
        }
        tr td{
            font-size: 0.775rem;
        }
        .tx-left{
            text-align: left;
        }
        .wd-10-p{
            width: 10%;
        }
        .table th {
            padding: 1rem 1rem 1rem 0.7rem !important;
        }
        a.menuback{
            color:#0866C6 !important;
            width: max-content;
            border-radius: 3px;
        }
        a.menuback:hover{
            color:#fff !important;
            background: #0866C6 !important;
        }
        .pd-l-30{
            padding-left: 30px;
        }
        .tx-trns{
            text-transform: uppercase;
        }
    </style>
    
    <script>
        import {
            cancelAllRequest,
            p,
        } from 'services/SDK/main'
        import {
            UpdateRole,
            AccessSearch,
            getListRole
        } from 'appModule/agents/agents.sdk'
        import { goTo} from 'helpers/ma'
        import {getStorage} from 'helpers/utilities'
        
        export default {
            onBeforeUnmount() {
                cancelAllRequest()
            },
            onMounted() {
                const access = getStorage('access', true)
                this.isHasUpdateAccess = access.indexOf('roles.change') > -1
                this.username = p('username').replace(/%20/g, ' ')
                this.update()
                this.render()
                // const mysdk = new SDK().getCustomers()
            },
            render(){
                getListRole({search:this.username})
                    .then((response)=>{
                        this.dataAcces = (response.data.items[0].access)
                        this.descriptions = response.data.items[0].description
                        this.title = response.data.items[0].title
                            AccessSearch()
                                .then((response)=>{
                                    const res = response.data;
                                    let valueItems = []
                                    _.filter(res.items, (val) => {
                                        if(val){
                                            if(this.dataAcces.indexOf(val.name) > -1){
                                                val.checked = true
                                            } else {
                                                val.checked = false
                                            }
                                            val.isSubMenu = val.title.indexOf('[Sub Menu]') > -1
                                            if (val.isSubMenu) val.title = val.title.replace('[Sub Menu]', '')
                                            valueItems.push(val)
                                        }
                                    })
                                    this.items = valueItems;
                                    this.isLoading = false
                                    this.update()
                                })
                                .catch((err)=>{
                                    console.log(err)
                                    Swal.fire({
                                        type: 'error',
                                        title: 'Oops...',
                                        text: err.message || err.error || 'Server Not Responding',
                                        // footer: '<a href>Why do I have this issue?</a>'
                                    })
                                })
                            this.update()
                    })
                    .catch((err)=>{
                        console.log(err)
                        Swal.fire({
                            type: 'error',
                            title: 'Oops...',
                            text: err.message || err.error || 'Server Not Responding',
                            // footer: '<a href>Why do I have this issue?</a>'
                        })
                    })
            },
            checkedVal(val){
                const name = val.name;
                let data = [] 
                for(const v of this.items){
                    if(v.name === name){
                        v.checked = !val.checked
                    }
                    data.push(v)
                }
                this.items = data;
            },
            Updates(e){
                e.preventDefault();
                const valueCheck = [] 
                _.filter(this.items,val=>val.checked).map((value)=>{
                    valueCheck.push(value.name)
                })
                const data = {
                    name: this.username,
                    title: this.$('#titlerole').value,
                    access:valueCheck.join(','),
                    description: this.$('#description').value
                }
                UpdateRole(data)
                .then((response)=>{
                    Swal.fire(
                        response.message,
                        '',
                        'success'
                        )
                        goTo('role/list')
                })
                .catch((err)=>{
                    console.log(err)
                    Swal.fire({
                        type: 'error',
                        title: 'Oops...',
                        text: err.message || err.error || 'Server Not Responding',
                    })
                })
            },
            
        }
    </script>
</role-edit>