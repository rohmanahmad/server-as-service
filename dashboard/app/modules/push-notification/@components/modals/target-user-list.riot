<!-- 
    props:
        - tempId
        - callback
        - showModal
 -->

<modal-target-user-list>
    <div id="{ modalId }" class="modal fade">
        <div class="modal-dialog" role="document">
            <div class="modal-content tx-size-sm">
                <div class="modal-header pd-x-20">
                    <h6 class="tx-16 mg-b-0 tx-uppercase tx-inverse">
                        List Of Target Users
                    </h6>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">Ã—</span>
                    </button>
                </div>
                <div class="modal-body pd-l-20 pd-r-20 pd-b-20 pd-t-0">
                    <div class="row row-sm mg-t-20">
                        <div class="col-12 tx-11 pd-t-10">
                            <table class="table table-bordered table-hovered bd">
                                <thead class="tx-11">
                                    <tr>
                                        <td width="30">#</td>
                                        <td>Username</td>
                                        <td>Version</td>
                                    </tr>
                                </thead>
                                <tbody class="tx-11">
                                    <tr>
                                        <td colspan="3" class="text-center">Data Not Available</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div><!-- modal-body -->
                <div class="modal-footer wrap">
                    <div class="row">
                        <div class="col-12">
                            <form-button-loading el-class="btn tx-11 btn-success" el-isloading="{ isloading }" el-title="Download" callback="{ download }" el-onloading-title="Downloading..."></form-button-loading>
                        </div>
                    </div>
                </div>
            </div>
        </div><!-- modal-dialog -->
    </div>
    <script>
        // import {
        //     cancelAllRequest,
        // } from 'services/SDK/main'
        // import {
        //     getPushNotifComments,
        // } from 'appModule/push-notification/push-notification.sdk'
        import { showAlertError, showAlertSuccess, randomString, debugLog } from 'helpers/utilities'

        export default {
            onBeforeMount() {
                if (typeof this.props.callback !== 'function') return showAlertError(new Error('[Modal Target Users] Callback Required'))
                this.buttonId = randomString(10, {onlyChars: true})
                this.modalId = randomString(10, {onlyChars: true})
                this.items = []
                this.callbackData = {}
                this.isprocessing = false
                this.modalEnabled = false
            },
            onMounted(props) {
                debugLog(`[${this.name}] [MOUNTED]`)
                // this.getList()
            },
            onBeforeUnmount() {
                // cancelAllRequest()
            },
            onUpdated(props, local) {
                // if (!props.masterData) return null
                // const masterId = parseInt(props.masterData.id)
                // if (this.masterId === masterId) return null
                if (props.showModal) {
                    this.showModal()
                    // this.getList(masterId)
                    // this.masterId = masterId
                }
            },
            showModal() {
                const el = $('#' + this.modalId)
                el.modal('show')
                el.on('hidden.bs.modal', () => {
                    this.modalEnabled = false
                    this.callback(false)
                })
            },
            callback(data) {
                this.props.callback(data)
            },
            download() {
                console.log('download....')
            }
            // getList(masterId) {
            //     if (masterId) {
            //         getPushNotifComments({
            //             masterId,
            //             limit: 5
            //         })
            //             .catch(err => {
            //                 showAlertError(err)
            //                 return null
            //             })
            //             .then(res => {
            //                 if (res) {
            //                     this.items = res.data
            //                     this.update({update: false})
            //                 }
            //             })
            //     }
            // }
        }
    </script>
</modal-target-user-list>