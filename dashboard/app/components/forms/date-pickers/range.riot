<!-- 
    props:
     - callback [Function]
     - customStyles [String]
     - disabled [Boolean]
     - elClass [String]
     - initialDate {since, until} default now()
     - name [String]
     - options [Object] default {}
     - showIcon [Boolean] default False
     - shortcut [Boolean] default False
     - showTime [Boolean] default False
     - el-format [String] default NULL
 -->

<form-date-picker-range>
    <div class="input-group {props.elClass}" style="{props.customStyles}">
        <div class="input-group-prepend" if="{ showIcon }">
            <i class="input-group-text ion-calendar"></i>
            <!-- <span class="" id="basic-addon1">@</span> -->
        </div>
        <input if="{dateType === 'range'}" disabled="{ props.disabled }" type="text" id="{ inputId }" class="form-control {props.elClass}" value="{ defaultValue.join(' - ') }">
    </div>
    <script>
        import { randomString, showAlertError, debugLog } from 'helpers/utilities'
        import { cloneDeep, set } from 'lodash'
        import moment from 'moment'
        const ranges = {
            // 'All Time': ['All Time'],
            'Today': [moment().set({h: 0, m: 0}), moment().set({h: 23, m: 59})],
            'Yesterday': [moment().subtract(1, 'days').set({h: 0, m: 0}), moment().subtract(1, 'days').set({h: 23, m: 59})],
            'Last 7 Days': [moment().subtract(6, 'days').set({h: 0, m: 0}), moment().set({h: 23, m: 59})],
            'Last 30 Days': [moment().subtract(29, 'days').set({h: 0, m: 0}), moment().set({h: 23, m: 59})],
            'This Month': [moment().startOf('month').set({h: 0, m: 0}), moment().endOf('month').set({h: 23, m: 59})],
            'Last Month': [moment().subtract(1, 'month').startOf('month').set({h: 0, m: 0}), moment().subtract(1, 'month').endOf('month').set({h: 23, m: 59})]
        }
        const defaultFormat = 'YYYY/MM/DD'
        export default {
            inputId: null,
            dateType: 'range',
            showTime: false,
            defaultFormat,
            defaultValue: null,
            onBeforeMount(props) {
                console.log(props.name, props.initialDate)
                this.inputId = randomString(10, {onlyChars: true})
                this.showIcon = props.showIcon
                const {since, until} = this.readInitialDate(props)
                this.dateName = null
                // name
                if (props.name) this.dateName = props.name
                // shortcut
                if (props.shortcut) this.shortcut = true
                // format
                if (props.elFormat) this.defaultFormat = props.elFormat
                else this.defaultFormat = 'YYYY/MM/DD'
                // show time
                if (props.showTime) {
                    this.showTime = props.showTime
                    this.defaultFormat += ' HH:mm'
                }
                // default value
                this.defaultValue = [moment(since).format(this.defaultFormat), moment(until).format(this.defaultFormat)]
            },
            onMounted(props) {
                debugLog(`[${this.name}] [MOUNTED]`)
                if (typeof props.callback !== 'function') {
                    showAlertError(new Error('[Date Picker] Callback Should Be a Function'))
                }
                this.initial(props.options)
            },
            onBeforeUpdate(props) {
                const {since, until, single} = this.readInitialDate(props)
                const oldDefaultValue = cloneDeep(this.defaultValue)
                const newDefaultValue = [moment(since).format(defaultFormat + ' HH:mm'), moment(until).format(defaultFormat + ' HH:mm')]
                if (oldDefaultValue.toString() != newDefaultValue.toString()) {
                    this.defaultValue = newDefaultValue
                    const sel = $('#' + this.inputId).data('daterangepicker')
                    if (sel) {
                        sel.setStartDate(newDefaultValue[0])
                        sel.setEndDate(newDefaultValue[1])
                    }
                }
            },
            readInitialDate(initialDate) {
                let since = moment().format(this.defaultFormat)
                let until = moment().format(this.defaultFormat)
                if (initialDate) {
                    since = moment(initialDate.since).format(this.defaultFormat)
                    until = moment(initialDate.until).format(this.defaultFormat)
                }
                return { since, until }
            },
            initial(customOptions={}) {
                if (this.showTime) customOptions['timePicker'] = true
                let config = {
                    autoUpdateInput: true,
                    singleDatePicker: false,
                    showDropdowns: true,
                    timePicker24Hour: true,
                    minYear: new Date().getFullYear() - 2,
                    maxYear: new Date().getFullYear(),
                    locale: {
                        format: this.defaultFormat,
                    },
                }
                for (const c in customOptions) {
                    const v = customOptions[c]
                    set(config, c, v)
                }
                if (this.shortcut) {
                    config.ranges = ranges
                    config.showCustomRangeLabel = true
                }
                const el = $('#' + this.inputId)
                if (el) {
                    el.daterangepicker(config, this.callbackDate)
                    el.on('cancel.daterangepicker', () => {
                        el.val('')
                        this.callback()
                    })
                }
            },
            callback(start, end) {
                this.props.callback({
                    name: this.dateName,
                    type: this.dateType,
                    since: start,
                    until: end
                })
            },
            callbackDate(s, u) {
                let f = cloneDeep(defaultFormat)
                if (this.showTime) f += ' HH:mm'
                this.currentData = [s.format(this.defaultFormat), u.format(this.defaultFormat)]
                this.callback(s, u)
                this.update()
            }
        }
    </script>
</form-date-picker-range>