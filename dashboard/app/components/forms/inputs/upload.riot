<!-- 
    props:
    - disabled [Boolean]
    - elClass [String]
    - acceptedMimes [String]
    - callback [Function]
    - maxSize [Int]
    - minSize [Int]
 -->
<form-upload>
    <input disabled="{ props.disabled }" type="file" class="{ props.elClass || 'form-control' }" onchange="{ callback }" accept="{ props.acceptedMimes }" id="{ inputId }">
    <style></style>
    <script>
        import { randomString, showAlertError, debugLog } from 'helpers/utilities'
        export default {
            onBeforeMount() {
                this.inputId = randomString(5, {onlyChars: true})
            },
            onMounted(props) {
                debugLog(`[${this.name}] [MOUNTED]`)
                if (typeof props.callback !== 'function') {
                    showAlertError(new Error('[Form Upload] Callback Should Be a Function'))
                }
            },
            callback(e) {
                const file = e.target.files[0]
                if (file) {
                    this.getInformation(file)
                        .then((fileData) => {
                            this.props.callback({
                                id: this.inputId,
                                fileData
                            })
                        })
                        .catch((e) => {
                            showAlertError(e)
                        })
                }
            },
            getInformation(file) {
                return new Promise((resolve, reject) => {
                    const fileType = file.type
                    const fileSize = file.size
                    if (['image/jpeg', 'image/png'].indexOf(fileType) === -1 ) throw new Error('Invalid Image Type. Only JPEG/JPG/PNG format')
                    if (this.props.maxSize && fileSize > this.props.maxSize) {
                        throw new Error('Image Too Large. Maximum Size is 500KB')
                    }
                    if (this.props.minSize && fileSize < this.props.minSize) {
                        throw new Error('Image Too Small. Minimum Size is 30KB')
                    }
                    const fileName = file.name
                    const reader = new FileReader()
                    reader.readAsBinaryString(file)
                    reader.onload = function (e) {
                        const base64 = btoa(e.target.result)
                        resolve({
                            file,
                            fileType,
                            fileSize,
                            fileName,
                            base64
                        })
                    }
                    reader.onerror = function (e) {
                        reject(e)
                    }
                })
            },
        }
    </script>
</form-upload>